"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[9801],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=u(n),m=o,b=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(b,l(l({ref:t},p),{},{components:n})):a.createElement(b,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=c;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),o=n(34334);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(i,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(83117),o=n(67294),i=n(34334),l=n(72389),r=n(67392),s=n(7094),u=n(12466);const p="tabList__CuJ",d="tabItem_LNqP";function c(e){var t;const{lazy:n,block:l,defaultValue:c,values:m,groupId:b,className:h}=e,k=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=m??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,r.l)(y,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===c?c:c??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==N&&!y.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:_}=(0,s.U)(),[v,T]=(0,o.useState)(N),O=[],{blockElementScrollPositionUntilNextRender:I}=(0,u.o5)();if(null!=b){const e=g[b];null!=e&&e!==v&&y.some((t=>t.value===e))&&T(e)}const j=e=>{const t=e.currentTarget,n=O.indexOf(t),a=y[n].value;a!==v&&(I(t),T(a),null!=b&&_(b,String(a)))},q=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;n=O[t]??O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;n=O[t]??O[O.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,i.Z)("tabs-container",p)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":l},h)},y.map((e=>{let{value:t,label:n,attributes:l}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>O.push(e),onKeyDown:q,onFocus:j,onClick:j},l,{className:(0,i.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":v===t})}),n??t)}))),n?(0,o.cloneElement)(k.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function m(e){const t=(0,l.Z)();return o.createElement(c,(0,a.Z)({key:String(t)},e))}},20695:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>u,toc:()=>d});var a=n(83117),o=(n(67294),n(3905)),i=n(65488),l=n(85162);const r={sidebar_position:6,title:"Query middle table"},s=void 0,u={unversionedId:"old-en/jimmer-sql/query/association",id:"old-en/jimmer-sql/query/association",title:"Query middle table",description:"Middle tables are hidden by the object model",source:"@site/docs/old-en/jimmer-sql/query/association.mdx",sourceDirName:"old-en/jimmer-sql/query",slug:"/old-en/jimmer-sql/query/association",permalink:"/jimmer/docs/old-en/jimmer-sql/query/association",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/old-en/jimmer-sql/query/association.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Query middle table"},sidebar:"tutorialSidebar",previous:{title:"Simple Query",permalink:"/jimmer/docs/old-en/jimmer-sql/query/find"},next:{title:"Mutation",permalink:"/jimmer/docs/old-en/jimmer-sql/mutation/"}},p={},d=[{value:"Middle tables are hidden by the object model",id:"middle-tables-are-hidden-by-the-object-model",level:2},{value:"Query the middle table directly",id:"query-the-middle-table-directly",level:2},{value:"Compare with ordinary query",id:"compare-with-ordinary-query",level:2},{value:"1. Implement a function based on middle table subquery",id:"1-implement-a-function-based-on-middle-table-subquery",level:3},{value:"2. Implement the same functionality based on ordinary subquery",id:"2-implement-the-same-functionality-based-on-ordinary-subquery",level:3}],c={toc:d};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"middle-tables-are-hidden-by-the-object-model"},"Middle tables are hidden by the object model"),(0,o.kt)("p",null,"Let's review this entity interface definition code"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Entity\npublic interface Book {\n\n    @ManyToMany\n    @JoinTable(\n        // highlight-next-line\n        name = "BOOK_AUTHOR_MAPPING", \n        joinColumnName = "BOOK_ID", \n        inverseJoinColumnName = "AUTHOR_ID"\n    )\n    List<Author> authors();\n\n    ...omit other code...\n}\n'))),(0,o.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Entity\ninterface Book {\n\n    @ManyToMany\n    @JoinTable(\n        // highlight-next-line\n        name = "BOOK_AUTHOR_MAPPING", \n        joinColumnName = "BOOK_ID", \n        inverseJoinColumnName = "AUTHOR_ID"\n    )\n    val authors: List<Author>\n\n    ...omit other code...\n}\n')))),(0,o.kt)("p",null,"In the above code, the ",(0,o.kt)("inlineCode",{parentName:"p"},"BOOK_AUTHOR_MAPPING")," table is used as an middle table."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The table ",(0,o.kt)("inlineCode",{parentName:"li"},"BOOK")," of the database corresponds to Java's entity interface ",(0,o.kt)("inlineCode",{parentName:"li"},"Book"),"."),(0,o.kt)("li",{parentName:"ul"},"The table ",(0,o.kt)("inlineCode",{parentName:"li"},"AUTHOR")," of the database corresponds to Java's entity interface ",(0,o.kt)("inlineCode",{parentName:"li"},"Author"),"."),(0,o.kt)("li",{parentName:"ul"},"However, the middle table ",(0,o.kt)("inlineCode",{parentName:"li"},"BOOK_AUTHOR_MAPPING")," of the database has no corresponding entity interface in the Java code.")),(0,o.kt)("p",null,"That is, the middle table is hidden by the object model."),(0,o.kt)("h2",{id:"query-the-middle-table-directly"},"Query the middle table directly"),(0,o.kt)("p",null,"jimmer-sql provides an interesting function, even if the middle table is hidden and has no corresponding entity, it can be directly queried."),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"AssociationTable<Book, BookTableEx, Author, AuthorTableEx> association =\n    AssociationTable.of(BookTableEx.class, BookTableEx::authors);\n\nList<Association<Book, Author>> associations =\n    sqlClient\n        // highlight-next-line\n        .createAssociationQuery(association)\n        .where(\n            association.source().id().eq(3L)\n        )\n        .select(association)\n        .execute();\nassociations.forEach(System.out::println);\n"))),(0,o.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val associations = sqlClient\n    .queries\n    .forList(Book::authors) {\n        where(table.source.id eq 3L)\n        select(table)\n    }\n    .execute()\nassociations.forEach(::println)\n")))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"For Java, middle table query only supports lambda style, not fluent style.")),(0,o.kt)("p",null,"Here, ",(0,o.kt)("inlineCode",{parentName:"p"},"createAssociationQuery")," in java or ",(0,o.kt)("inlineCode",{parentName:"p"},"queries.forList")," in kotlin means to create a query based on the middle table, not based on the entity table."),(0,o.kt)("p",null,"The generated SQL is as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_1_.BOOK_ID, \n    tb_1_.AUTHOR_ID \n/* hight-next-line */\nfrom BOOK_AUTHOR_MAPPING as tb_1_\nwhere tb_1_.BOOK_ID = ?\n")),(0,o.kt)("p",null,"Sure enough, this is a query based on an middle table."),(0,o.kt)("p",null,"The final print result is as follows (the original output is compact, formatted here for ease of reading):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Association{\n    source={\n        "id":3\n    }, target={\n        "id":1\n    }\n}\nAssociation{\n    source={\n        "id":3\n    }, \n    target={\n        "id":2\n    }\n}\n')),(0,o.kt)("p",null,"The return data is a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"Association")," objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"package org.babyfish.jimmer.sql.association;\n\npublic class Association<S, T> {\n\n    public Association(S source, T target) {\n        this.source = source;\n        this.target = target;\n    }\n\n    public S source() {\n        return source;\n    }\n\n    public T target() {\n        return target;\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Association<S, T>")," represents the middle table entity associated from the ",(0,o.kt)("inlineCode",{parentName:"p"},"S")," type to the ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," type. middle table entities are pseudo-entities and have no id. It has only two properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"source"),": The object corresponding to the foreign key of the middle table pointing to the source table.(in this case, it is ",(0,o.kt)("inlineCode",{parentName:"li"},"Book"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"target"),": The object corresponding to the foreign key of the middle table pointing to the target table. (in this case, it is",(0,o.kt)("inlineCode",{parentName:"li"},"Author"),").")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In this example, the object format of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Association")," is not defined using an object fetcher (in fact, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Association")," does not support object fetcher either), so the ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"targate")," return objects with only id.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Author")," also has a inverse many-to-many association ",(0,o.kt)("inlineCode",{parentName:"p"},"Author.books"),", which is a mirror of ",(0,o.kt)("inlineCode",{parentName:"p"},"Book.authors"),"."),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Entity\npublic interface Author {\n\n    // highlight-next-line\n    @ManyToMany(mappedBy = "authors")\n    List<Book> books();\n\n    ...\n}\n'))),(0,o.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Entity\ninterface Author {\n\n    // highlight-next-line\n    @ManyToMany(mappedBy = "authors")\n    val books: List<Book>\n\n    ...\n}\n')))),(0,o.kt)("p",{parentName:"li"},"Deveoper can also create middle table query based on ",(0,o.kt)("inlineCode",{parentName:"p"},"Author.books"),", but ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," stands for ",(0,o.kt)("inlineCode",{parentName:"p"},"Author")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," stands for ",(0,o.kt)("inlineCode",{parentName:"p"},"Book"),", contrary to the previous example.")))),(0,o.kt)("p",null,"In this example, we only query the middle table itself. So, there are only ids in the ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," objects."),(0,o.kt)("p",null,"To get the complete ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," objects, you can join the tables and return a tuple, like this"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"List<Tuple2<Book, Author>> tuples =\n    sqlClient\n        .createAssociationQuery(\n            BookTableEx.class,\n            BookTableEx::authors,\n            (q, association) -> {\n                q.where(\n                    association.source().id().eq(3L)\n                );\n                // highlight-next-line\n                return q.select(\n                    association.source(),\n                    association.target()\n                );\n            }\n        ).execute();\ntuples.forEach(System.out::println);\n"))),(0,o.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val associations = sqlClient\n    .queries\n    .forList(Book::authors) {\n        where(table.source.id eq 3L)\n        select(\n            table.source,\n            table.target\n        )\n    }\n    .execute()\nassociations.forEach(::println)\n")))),(0,o.kt)("p",null,"The generated SQL is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n\n    /* source */\n    tb_1_.BOOK_ID, \n    tb_2_.NAME, \n    tb_2_.EDITION, \n    tb_2_.PRICE, \n    tb_2_.STORE_ID, \n\n    /* target */\n    tb_1_.AUTHOR_ID, \n    tb_3_.FIRST_NAME, \n    tb_3_.LAST_NAME, \n    tb_3_.GENDER\n\nfrom BOOK_AUTHOR_MAPPING as tb_1_ \ninner join BOOK as tb_2_ \n    on tb_1_.BOOK_ID = tb_2_.ID \ninner join AUTHOR as tb_3_ \n    on tb_1_.AUTHOR_ID = tb_3_.ID \nwhere tb_1_.BOOK_ID = ?\n")),(0,o.kt)("p",null,"The final print result is as follows (the original output is compact, formatted here for ease of reading):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Tuple2{\n    _1={\n        "id":3,\n        "name":"Learning GraphQL",\n        "edition":3,\n        "price":51.00,\n        "store":{\n            "id":1\n        }\n    }, \n    _2={\n        "id":1,\n        "firstName":"Alex",\n        "lastName":"Banks",\n        "gender":"MALE"\n    }\n}\nTuple2{\n    _1={\n        "id":3,\n        "name":"Learning GraphQL",\n        "edition":3,\n        "price":51.00,\n        "store":{\n            "id":1\n        }\n    }, \n    _2={\n        "id":2,\n        "firstName":"Eve",\n        "lastName":"Procello",\n        "gender":"FEMALE"\n    }\n}\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The association object ",(0,o.kt)("inlineCode",{parentName:"p"},"Association<S, T>")," is simple and special and does not need to support ",(0,o.kt)("a",{parentName:"p",href:"./fetcher"},"object fetcher"),"."),(0,o.kt)("p",{parentName:"admonition"},"Note that this only refers to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Association<S, T>")," object ",(0,o.kt)("b",null," itself")," does not support, its association property ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," still support ",(0,o.kt)("a",{parentName:"p",href:"./fetcher"},"object fetcher"),", like this"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"return q.select(\n    association\n        .source()\n        // highlight-next-line\n        .fetch(\n            BookFetcher.$\n                .allScalarFields()\n                .store(\n                    BookStoreFetcher.$.allScalarFields()\n                )\n        ),\n    association.target()\n);\n"))),(0,o.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"select(\n    table\n        .source\n        // highlight-next-line\n        .fetchBy {\n            allScalarFields()\n            store { \n                allScalarFields()\n            }\n        },\n    table.target\n)\n"))))),(0,o.kt)("h2",{id:"compare-with-ordinary-query"},"Compare with ordinary query"),(0,o.kt)("p",null,"Readers may think that the value of queries based on middle table is to allow developers to write more performant queries."),(0,o.kt)("p",null,"But that's not the case. Due to the existence of the two optimization features ",(0,o.kt)("a",{parentName:"p",href:"../basic/table-join#phantom-join"},"phantom join")," and ",(0,o.kt)("a",{parentName:"p",href:"../basic/table-join#half-join"},"half join"),", application can get ideal performance whether the query is based on an middle table or not. Whether or not to use a query based on an middle table is entirely up to the user's own preferences."),(0,o.kt)("h3",{id:"1-implement-a-function-based-on-middle-table-subquery"},"1. Implement a function based on middle table subquery"),(0,o.kt)("p",null,"In the previous code, we demonstrated a top-level query based on an middle table; this example demonstrates a subquery based on an middle table."),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'List<Book> books = sqlClient\n    .createQuery(BookTable.class, (q, book) -> {\n        q.where(\n            book.id().in(\n                // highlight-next-line\n                q.createAssociationSubQuery(\n                    BookTableEx.class,\n                    BookTableEx::authors,\n                    (sq, association) -> {\n                        sq.where(\n                            association\n                                .target() // \u03b1\n                                .firstName().eq("Alex")\n                        );\n                        return sq.select(\n                            association\n                                .source() // \u03b2\n                                .id()\n                        );\n                    }\n                )\n            )\n        );\n        return q.select(book);\n    }).execute();\n'))),(0,o.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val books = sqlClient\n    .createQuery(Book::class) {\n        where(\n            table.id valueIn\n                // highlight-next-line\n                subQueries.forList(Book::authors) {\n                    where(\n                        table\n                        .target // \u03b1\n                        .firstName eq "Alex"\n                    )\n                    select(\n                        table\n                        .source // \u03b2\n                        .id\n                    )\n                }\n        )\n        select(table)\n    }\n    .execute()\n')))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"createAssociationSubQuery")," in java or ",(0,o.kt)("inlineCode",{parentName:"p"},"subQueries.forList")," in kotlin is used to create a subquery based on an middle table. The query looks for all books that contain authors whose ",(0,o.kt)("inlineCode",{parentName:"p"},"firstName"),' is "Alex".')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"association.target()")," at ",(0,o.kt)("inlineCode",{parentName:"p"},"\u03b1")," is a real table join, which will generate a JOIN clause to the ",(0,o.kt)("inlineCode",{parentName:"p"},"AUTHOR")," table in SQL.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"association.source()")," at ",(0,o.kt)("inlineCode",{parentName:"p"},"\u03b2")," is a ",(0,o.kt)("a",{parentName:"p",href:"../basic/table-join#phantom-join"},"phantom join"),", JOIN clause will not be generated in SQL."))),(0,o.kt)("p",null,"The generated SQL is as follows: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_1_.ID, \n    tb_1_.NAME, \n    tb_1_.EDITION, \n    tb_1_.PRICE, \n    tb_1_.STORE_ID \nfrom BOOK as tb_1_ \nwhere \n    tb_1_.ID in (\n        /* highlight-next-line */\n        select \n            tb_2_.BOOK_ID \n        from BOOK_AUTHOR_MAPPING as tb_2_ \n        inner join AUTHOR as tb_3_ \n            on tb_2_.AUTHOR_ID = tb_3_.ID \n        where tb_3_.FIRST_NAME = ?\n    )\n")),(0,o.kt)("h3",{id:"2-implement-the-same-functionality-based-on-ordinary-subquery"},"2. Implement the same functionality based on ordinary subquery"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'BookTable book = BookTable.$;\nAuthorTableEx author = AuthorTableEx.$;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .where(\n        book.id().in(sqlClient\n            // highlight-next-line\n            .createSubQuery(author)\n            .where(\n                author.firstName().eq("Alex")\n            )\n            .select(author.books().id())\n        )\n    )\n    .select(book)\n    .execute();\n'))),(0,o.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val books = sqlClient\n    .createQuery(Book::class) {\n        where(\n            table.id valueIn\n                // highlight-next-line\n                subQuery(Author::class) {\n                    where(\n                        table.firstName eq "Alex"\n                    )\n                    select(\n                        table\n                            .books // \u03b1\n                            .id\n                    )\n                }\n        )\n        select(table)\n    }\n    .execute()\n')))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"createSubQuery")," in java or ",(0,o.kt)("inlineCode",{parentName:"p"},"subQuery")," in kotlin is used to create a ordinary subquery without using middle table. achieve the exact same functionality.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"author.books()")," at ",(0,o.kt)("inlineCode",{parentName:"p"},"\u03b1")," is a ",(0,o.kt)("a",{parentName:"p",href:"../basic/table-join#half-join"},"half join"),", so only need JOIN from ",(0,o.kt)("inlineCode",{parentName:"p"},"AUTHOR")," table to middle table ",(0,o.kt)("inlineCode",{parentName:"p"},"BOOK_AUTHOR_MAPPING")," is generated, without further JOIN to the ",(0,o.kt)("inlineCode",{parentName:"p"},"BOOK table"),"."))),(0,o.kt)("p",null,"The generated SQL is as follows: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select \n\n    tb_1_.ID, \n    tb_1_.NAME, \n    tb_1_.EDITION, \n    tb_1_.PRICE, \n    tb_1_.STORE_ID \n\nfrom BOOK as tb_1_ \nwhere \n    tb_1_.ID in (\n        /* highlight-next-line */\n        select \n            tb_3_.BOOK_ID \n        from AUTHOR as tb_2_ \n        inner join BOOK_AUTHOR_MAPPING as tb_3_ \n            on tb_2_.ID = tb_3_.AUTHOR_ID \n        where tb_2_.FIRST_NAME = ?\n    )\n")),(0,o.kt)("p",null,"Comparing these two SQL statements, it is not difficult to find that they have the same function and the same performance."),(0,o.kt)("p",null,"Therefore, whether or not to use queries based on middle tables has no impact on performance. Feel free to choose the style you like."))}m.isMDXComponent=!0}}]);