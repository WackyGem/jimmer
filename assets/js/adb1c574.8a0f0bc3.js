"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[2637],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,r[1]=c;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},28642:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=n(83117),i=(n(67294),n(3905));const o={sidebar_position:3,title:"Cache Consistency"},r=void 0,c={unversionedId:"cache/consistency",id:"cache/consistency",title:"Cache Consistency",description:"In previous articles on object cache, association cache, and calculated cache, we have discussed in detail how Jimmer automatically deletes affected caches when data is modified.",source:"@site/docs/cache/consistency.mdx",sourceDirName:"cache",slug:"/cache/consistency",permalink:"/jimmer/docs/cache/consistency",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/cache/consistency.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Cache Consistency"},sidebar:"tutorialSidebar",previous:{title:"Calculated Cache",permalink:"/jimmer/docs/cache/cache-type/calculation"},next:{title:"Multi-view Cache",permalink:"/jimmer/docs/cache/multiview-cache/"}},l={},s=[{value:"Consistency of BinLog Trigger (Recommended)",id:"consistency-of-binlog-trigger-recommended",level:2},{value:"Consistency of Transaction Trigger",id:"consistency-of-transaction-trigger",level:2}],p={toc:s};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"In previous articles on ",(0,i.kt)("a",{parentName:"p",href:"./cache-type/object"},"object cache"),", ",(0,i.kt)("a",{parentName:"p",href:"./cache-type/association"},"association cache"),", and ",(0,i.kt)("a",{parentName:"p",href:"./cache-type/calculation"},"calculated cache"),", we have discussed in detail how Jimmer automatically deletes affected caches when data is modified."),(0,i.kt)("p",{parentName:"admonition"},"So here we will not repeat the discussion of how Jimmer intelligently deletes affected caches. "),(0,i.kt)("p",{parentName:"admonition"},"The focus of this article is how Jimmer ensures cache deletion operations issued can definitely succeed.")),(0,i.kt)("p",null,"Whether it is the fully automatic consistency of ",(0,i.kt)("a",{parentName:"p",href:"./cache-type/object"},"object cache")," and ",(0,i.kt)("a",{parentName:"p",href:"./cache-type/association"},"association cache"),", or the user assisted consistency of ",(0,i.kt)("a",{parentName:"p",href:"./cache-type/calculation"},"calculated cache"),", the cache consistency of Jimmer is driven by ",(0,i.kt)("a",{parentName:"p",href:"../mutation/trigger"},"triggers"),"."),(0,i.kt)("p",null,"Jimmer triggers are divided into BinLog triggers and Transaction triggers."),(0,i.kt)("p",null,"For different situations, Jimmer adopts different strategies to ensure cache consistency, that is, to ensure that cache cleanup operations must succeed."),(0,i.kt)("h2",{id:"consistency-of-binlog-trigger-recommended"},"Consistency of BinLog Trigger (Recommended)"),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"trigger-type")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"BINLOG_ONLY")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"BOTH"),", Jimmer uses the BinLog trigger to delete invalid caches."),(0,i.kt)("p",null,"In this case, developers respond to messaging queue notifications, process them simply and then call Jimmer's ",(0,i.kt)("inlineCode",{parentName:"p"},"BinLog")," API ",(0,i.kt)("em",{parentName:"p"},"(this user code is very simple, and its complexity can be ignored)"),". Calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"BinLog")," API initiates all trigger callbacks, including cache deletion."),(0,i.kt)("p",null,"Take Kafka as an example. As long as the ",(0,i.kt)("inlineCode",{parentName:"p"},"BinLog")," API call succeeds before committing the consumption progress, cache cleanup can be guaranteed to eventually succeed."),(0,i.kt)("h2",{id:"consistency-of-transaction-trigger"},"Consistency of Transaction Trigger"),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"trigger-type")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"TRANSACTION_ONLY"),", Jimmer will be ",(0,i.kt)("strong",{parentName:"p"},"forced")," to use the Transaction trigger to delete invalid caches."),(0,i.kt)("p",null,"For Transaction triggers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Caches will only be deleted when modifications caused by calling Jimmer APIs within the current App triggers callbacks, including cache deletion.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"All trigger callbacks complete before the transaction is committed, including cache deletion."))),(0,i.kt)("p",null,"If a simple implementation of direct cache deletion is adopted, any exception during cache deletion will cause the transaction to be rolled back. Obviously, this implementation is not reasonable."),(0,i.kt)("p",null,"Therefore, when ",(0,i.kt)("inlineCode",{parentName:"p"},"trigger-type")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"TRANSACTION_ONLY"),", the cache deletion operations perceived by the user will be delayed. Cache deletion operations are not executed first, but are stored in the ",(0,i.kt)("inlineCode",{parentName:"p"},"JIMMER_TRANS_CACHE_OPERATOR")," table. "),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Jimmer will automatically create the ",(0,i.kt)("inlineCode",{parentName:"p"},"JIMMER_TRANS_CACHE_OPERATOR")," table."),(0,i.kt)("p",{parentName:"admonition"},"However, the default ",(0,i.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.sql.dialect.DefaultDialect")," does not support this operation and will throw an exception."),(0,i.kt)("p",{parentName:"admonition"},"So do not use the default ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultDialect"),", be sure to specify the database dialect explicitly.  ")),(0,i.kt)("p",null,"Modifications to the ",(0,i.kt)("inlineCode",{parentName:"p"},"JIMMER_TRANS_CACHE_OPERATOR")," table and business tables belong to the same database local transaction, either both succeed or both fail."),(0,i.kt)("p",null,"After the transaction commits successfully, Jimmer will immediately execute a ",(0,i.kt)("inlineCode",{parentName:"p"},"Flush")," operation."),(0,i.kt)("p",null,"The so-called ",(0,i.kt)("inlineCode",{parentName:"p"},"Flush")," operation is to obtain cache deletion operations that have not yet been executed from the ",(0,i.kt)("inlineCode",{parentName:"p"},"JIMMER_TRANS_CACHE_OPERATOR")," table as perceived by the user, execute the actual cache deletion operation, and delete related records if successful."),(0,i.kt)("p",null,"For the ",(0,i.kt)("inlineCode",{parentName:"p"},"Flush")," operation executed immediately after transaction commit:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If successful, it's best to have good real-time performance. This should be the case most of the time.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Even if it fails, it doesn't matter. Because Jimmer will periodically execute ",(0,i.kt)("inlineCode",{parentName:"p"},"Flush")," operations to ensure related cache operations eventually succeed. The interval of ",(0,i.kt)("inlineCode",{parentName:"p"},"Flush")," operations is controlled by the global SpringBoot configuration item ",(0,i.kt)("inlineCode",{parentName:"p"},"jimmer.transaction-cache-operator-fixed-delay"),", which is specified in milliseconds and defaults to 5000."))))}d.isMDXComponent=!0}}]);