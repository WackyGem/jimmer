"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[2756],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),c=o,k=d["".concat(l,".").concat(c)]||d[c]||m[c]||i;return n?a.createElement(k,r(r({ref:t},u),{},{components:n})):a.createElement(k,r({ref:t},u))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,r[1]=p;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),o=n(34334);const i="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(i,r),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(83117),o=n(67294),i=n(34334),r=n(72389),p=n(67392),l=n(7094),s=n(12466);const u="tabList__CuJ",m="tabItem_LNqP";function d(e){var t;const{lazy:n,block:r,defaultValue:d,values:c,groupId:k,className:g}=e,h=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=c??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,p.l)(v,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===d?d:d??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??h[0].props.value;if(null!==f&&!v.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:I}=(0,l.U)(),[N,j]=(0,o.useState)(f),B=[],{blockElementScrollPositionUntilNextRender:T}=(0,s.o5)();if(null!=k){const e=y[k];null!=e&&e!==N&&v.some((t=>t.value===e))&&j(e)}const w=e=>{const t=e.currentTarget,n=B.indexOf(t),a=v[n].value;a!==N&&(T(t),j(a),null!=k&&I(k,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=B.indexOf(e.currentTarget)+1;n=B[t]??B[0];break}case"ArrowLeft":{const t=B.indexOf(e.currentTarget)-1;n=B[t]??B[B.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,i.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},g)},v.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>B.push(e),onKeyDown:O,onFocus:w,onClick:w},r,{className:(0,i.Z)("tabs__item",m,null==r?void 0:r.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,o.cloneElement)(h.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function c(e){const t=(0,r.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}},88886:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>p,metadata:()=>s,toc:()=>m});var a=n(83117),o=(n(67294),n(3905)),i=n(65488),r=n(85162);const p={sidebar_position:2,title:"MapStruct"},l=void 0,s={unversionedId:"object/view/mapstruct",id:"object/view/mapstruct",title:"MapStruct",description:"Jimmer dynamic objects and static POJOs are completely different, they are a complete new technical system, which supports the entire Jimmer ORM.",source:"@site/docs/object/view/mapstruct.mdx",sourceDirName:"object/view",slug:"/object/view/mapstruct",permalink:"/jimmer/docs/object/view/mapstruct",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/object/view/mapstruct.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"MapStruct"},sidebar:"tutorialSidebar",previous:{title:"DTO Language",permalink:"/jimmer/docs/object/view/dto-language"},next:{title:"Visibility",permalink:"/jimmer/docs/object/visibility"}},u={},m=[{value:"Dependencies and Preprocessors",id:"dependencies-and-preprocessors",level:2},{value:"Define POJO",id:"define-pojo",level:2},{value:"Define Mapper",id:"define-mapper",level:2},{value:"If the entity defines @IdView properties",id:"if-the-entity-defines-idview-properties",level:3},{value:"If the entity does not define @IdView properties",id:"if-the-entity-does-not-define-idview-properties",level:3},{value:"Usage",id:"usage",level:2},{value:"Make POJO implement Input interface",id:"make-pojo-implement-input-interface",level:2}],d={toc:m};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Jimmer dynamic objects and static POJOs are completely different, they are a complete new technical system, which supports the entire Jimmer ORM."),(0,o.kt)("p",null,"However, sometimes we need to convert between Jimmer dynamics and ordinary static POJOs. For example, Jimmer itself recommends Input DTOs ",(0,o.kt)("em",{parentName:"p"},"(whether REST or GraphQL)")," for API security."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"For Kotlin, this approach is not recommended, ",(0,o.kt)("a",{parentName:"p",href:"./dto-language"},"DTO Language")," is more recommended. "),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Problems with Kotlin"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This solution is based on ",(0,o.kt)("a",{parentName:"p",href:"https://mapstruct.org/"},"mapstruct framework"),", and mapstruct framework is based on ",(0,o.kt)("inlineCode",{parentName:"p"},"apt"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Kotlin has deprecated ",(0,o.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/kapt.html"},"kapt")," and advocates the use of ",(0,o.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/ksp-overview.html"},"ksp")))),(0,o.kt)("p",{parentName:"li"},"Therefore, as Kotlin evolves, using ",(0,o.kt)("inlineCode",{parentName:"p"},"kapt")," may encounter more and more problems in the future.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The DTO types generated by the DTO language have built-in ",(0,o.kt)("a",{parentName:"p",href:"../../query/object-fetcher"},"Object Fetchers"),", so"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"They can be queried by underlying APIs, see ",(0,o.kt)("a",{parentName:"p",href:"../../query/object-fetcher/dto"},"Object Fetcher/DTO Query"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"They can be queried by Spring Data style user code, see ",(0,o.kt)("a",{parentName:"p",href:"../../spring/repository/dto"},"Spring Data/Query DTO")))),(0,o.kt)("p",{parentName:"li"},"However, manually defined and MapStruct mapped DTOs do not have these features, they only support mutual conversion with dynamic entities.")))),(0,o.kt)("h2",{id:"dependencies-and-preprocessors"},"Dependencies and Preprocessors"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Jimmer chooses ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mapstruct/mapstruct"},"MapStruct")," as the technology for converting to and from static POJOs.")),(0,o.kt)("p",null,"For converting static POJOs to Jimmer dynamic objects, MapStruct does not know how to build Jimmer objects. So"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Jimmer's own preprocessor ",(0,o.kt)("em",{parentName:"p"},"(Java's ",(0,o.kt)("inlineCode",{parentName:"em"},"jimmer-apt")," or Kotlin's ",(0,o.kt)("inlineCode",{parentName:"em"},"jimmer-ksp"),")")," generates some MapStruct-oriented code in Draft, allowing MapStruct to build Jimmer objects through its ",(0,o.kt)("a",{parentName:"p",href:"https://mapstruct.org/documentation/stable/reference/html/#mapping-with-builders"},"Builder")," mode.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Jimmer extends MapStruct's Annotation Processor. This extension allows MapStruct to utilize the capabilities reserved for MapStruct in the generated Draft to build Jimmer objects."),(0,o.kt)("p",{parentName:"li"},"  This extension is called ",(0,o.kt)("inlineCode",{parentName:"p"},"jimmer-mapstruct-apt")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For Java, ",(0,o.kt)("inlineCode",{parentName:"p"},"jimmer-mapstruct-apt")," is included in ",(0,o.kt)("inlineCode",{parentName:"p"},"jimmer-apt"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For Kotlin, ",(0,o.kt)("inlineCode",{parentName:"p"},"jimmer-ksp")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"jimmer-mapstruct-apt")," must be used together in the maven or gradle configuration file"))))),(0,o.kt)(i.Z,{groupId:"buildTool",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java_maven",label:"Java(Maven)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="pom.xml"',title:'"pom.xml"'},"...omit other code...\n\n<build>\n    <dependencies>\n        <dependency> \u2780\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>${lombok.version}</version>\n        </dependency>\n        <dependency> \u278a\n            <groupId>org.mapstruct</groupId>\n            <artifactId>mapstruct</artifactId>\n            <version>${mapstruct.version}</version>\n        </dependency>\n        ...omit other dependencies...\n    </dependencies>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.10.1</version>\n            <configuration>\n                <annotationProcessorPaths>\n                    <path> \u2781\n                        <groupId>org.projectlombok</groupId>\n                        <artifactId>lombok</artifactId>\n                        <version>${lombok.version}</version>\n                    </path>\n                    <path> \u278b\n                        <groupId>org.babyfish.jimmer</groupId>\n                        <artifactId>jimmer-apt</artifactId>\n                        <version>${jimmer.version}</version>\n                    </path>\n                    <path> \u278c\n                        <groupId>org.mapstruct</groupId>\n                        <artifactId>mapstruct-processor</artifactId>\n                        <version>${mapstruct.version}</version>\n                    </path>\n                </annotationProcessorPaths>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n\n...omit other code...\n"))),(0,o.kt)(r.Z,{value:"java_gradle",label:"Java(Gradle)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="build.gradle"',title:'"build.gradle"'},'dependencies {\n    \n    implementation "org.projectlombok:lombok:${lombok.version}" \u2780\n    implementation "org.mapstruct:mapstruct:${mapstructVersion}" \u278a\n\n    annotationProcessor "org.projectlombok:lombok:${lombok.version}" \u2781\n    annotationProcessor "org.babyfish.jimmer:jimmer-apt:${jimmerVersion}" \u278b\n    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}" \u278c\n\n    ...omit other dependencies...\n}\n'))),(0,o.kt)(r.Z,{value:"kotin_maven",label:"Kotlin(Maven)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="pom.xml"',title:'"pom.xml"'},"...omit other code...\n\n<build>\n    <sourceDirectory>src/main/kotlin</sourceDirectory>\n    <testSourceDirectory>src/test/kotlin</testSourceDirectory>\n\n    <dependencies>\n        <dependency> \u278a\n            <groupId>org.mapstruct</groupId>\n            <artifactId>mapstruct</artifactId>\n            <version>${mapstruct.version}</version>\n        </dependency>\n        ...omit other dependencies...\n    </dependencies>\n\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <executions>\n                <execution>\n                    <id>compile</id>\n                    <phase>compile</phase>\n                    <goals>\n                        <goal>compile</goal>\n                    </goals>\n                </execution>\n                <execution>\n                    <id>test-compile</id>\n                    <phase>test-compile</phase>\n                    <goals>\n                        <goal>test-compile</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <compilerPlugins>\n                    <compilerPlugin>ksp</compilerPlugin>\n                </compilerPlugins>\n                <annotationProcessorPaths>\n                    <path>\n                        <groupId>org.mapstruct</groupId> \u278c\n                        <artifactId>mapstruct-processor</artifactId>\n                        <version>${mapstruct.version}</version>\n                    </path>\n                    <path>\n                        <groupId>org.babyfish.jimmer</groupId> a\n                        <artifactId>jimmer-mapstruct-apt</artifactId>\n                        <version>${jimmer.version}</version>\n                    </path>\n                </annotationProcessorPaths>\n            </configuration>\n            <dependencies>\n                <dependency>\n                    <groupId>com.dyescape</groupId>\n                    <artifactId>kotlin-maven-symbol-processing</artifactId>\n                    <version>1.3</version>\n                </dependency>\n                <dependency>\n                    <groupId>org.babyfish.jimmer</groupId> \u278b\n                    <artifactId>jimmer-ksp</artifactId>\n                    <version>${jimmer.version}</version>\n                </dependency>\n            </dependencies>\n        </plugin>\n    </plugins>\n</build>\n\n...omit other code...\n"))),(0,o.kt)(r.Z,{value:"kotin_gralde",label:"Kotlin(Gradle.kts)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="build.gradle.kts"',title:'"build.gradle.kts"'},'plugins {\n    id("com.google.devtools.ksp") version "1.7.10-1.0.6"\n    kotlin("kapt") version "1.6.21"\n\n    ...omit other plugins...\n}\ndependencies {\n    \n    implementation "org.mapstruct:mapstruct:${mapstructVersion}" \u278a\n\n    ksp("org.babyfish.jimmer:jimmer-ksp:${jimmerVersion}") \u278b\n    kapt("org.mapstruct:mapstruct-processor:${mapstructVersion}") \u278c\n    kapt("org.babyfish.jimmer:jimmer-mapstruct-apt:${jimmerVersion}") a\n\n    ...omit other dependencies...\n}\n\nkotlin {\n    sourceSets.main {\n        kotlin.srcDir("build/generated/ksp/main/kotlin")\n    }\n}\n')))),(0,o.kt)("p",null,"In this example, we assume static POJOs are written in Java using ",(0,o.kt)("a",{parentName:"p",href:"https://projectlombok.org/"},"lombok"),"."),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Language"),(0,o.kt)("th",null,"Location"),(0,o.kt)("th",null,"Description"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",{rowspan:"3"},"Java and Kotlin"),(0,o.kt)("td",null,"\u278a"),(0,o.kt)("td",null,"Introduce mapstruct dependency for user code to use mapstruct annotations")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"\u278b"),(0,o.kt)("td",null,"Use Jimmer's preprocessor to generate related source code for dynamic types, Java uses `jimmer-apt`, Kotlin uses `jimmer-ksp`")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"\u278c"),(0,o.kt)("td",null,"Use mapstruct's annotation processor to generate source code ",(0,o.kt)("i",null,"(introduced later)"))),(0,o.kt)("tr",null,(0,o.kt)("td",{rowspan:"2"},"Java only"),(0,o.kt)("td",null,"\u2780"),(0,o.kt)("td",null,"Introduce lombok dependency for user code to use lombok annotations")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"\u2781"),(0,o.kt)("td",null,"Use Lombok preprocessor to modify static POJO class code, e.g. add getters, setters")),(0,o.kt)("tr",null,(0,o.kt)("td",{rowspan:"2"},"Kotlin only"),(0,o.kt)("td",null,"a"),(0,o.kt)("td",null,"Use `jimmer-mapstruct-apt` to extend \u278c")))),(0,o.kt)("h2",{id:"define-pojo"},"Define POJO"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookInput.java"',title:'"BookInput.java"'},"@Data\npublic class BookInput {\n\n    @Nullable\n    private Long id;\n\n    private String name;\n\n    private int edition;\n\n    private BigDecimal price;\n\n    @Nullable\n    private Long storeId;\n\n    private List<Long> authorIds;\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookInput.java"',title:'"BookInput.java"'},"data class BookInput(\n    val id: Long? = null,\n    val name: String,\n    val edition: Int,\n    val price: BigDecimal,\n    val storeId: Long?,\n    val authorIds: List<Long>\n)\n")))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@Nullable")," annotation is used in the Java POJO code only to improve readability and has no functional effect")),(0,o.kt)("p",null,"Three attributes of this POJO need to be explained:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.id")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Here, ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.id")," is allowed to be null. This is necessary, for example, the id does not need to be specified when inserting data.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The dynamic attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"Book.id")," of the entity object does not allow null ",(0,o.kt)("em",{parentName:"p"},"(Jimmer prohibits id from being null, please refer to ",(0,o.kt)("a",{parentName:"em",href:"../../mapping/base/basic#id"},"Mapping/Basic Mapping/@Id"),")")))),(0,o.kt)("p",{parentName:"li"},"The two contradict each other, so how to convert ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"Book"),"?"),(0,o.kt)("admonition",{parentName:"li",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Jimmer agrees that if the attribute of the POJO can be null while the corresponding attribute of the dynamic object cannot be null, the corresponding attribute of the dynamic object will not be assigned and will remain missing."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.storeId")),(0,o.kt)("p",{parentName:"li"},"It is obvious that this is the associated id, corresponding to the dynamic attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"Book.store")," of the entity object."),(0,o.kt)("p",{parentName:"li"},"The dynamic object attribute is defined as an associated object, while the POJO is defined as an associated id, called short association mapping."),(0,o.kt)("admonition",{parentName:"li",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For the concept of short association, please refer to ",(0,o.kt)("a",{parentName:"p",href:"../../mapping/advanced/view/id-view#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E7%9F%AD%E5%85%B3%E8%81%94"},"here")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.authors")),(0,o.kt)("p",{parentName:"li"},"It is obvious that this is a collection of associated ids, corresponding to the dynamic attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"Book.store")," of the entity object."),(0,o.kt)("p",{parentName:"li"},"The dynamic object attribute is defined as a collection of associated objects, while the POJO is defined as a collection of associated ids, called short association mapping."),(0,o.kt)("admonition",{parentName:"li",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For the concept of short association, please refer to ",(0,o.kt)("a",{parentName:"p",href:"../../mapping/advanced/view/id-view#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E7%9F%AD%E5%85%B3%E8%81%94"},"here"))))),(0,o.kt)("p",null,"The other attributes are exactly the same as the original entity definition and need no explanation."),(0,o.kt)("h2",{id:"define-mapper"},"Define Mapper"),(0,o.kt)("p",null,"The most important thing when using mapstruct is to define the Mapper, as follows"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookInputMapper.java"',title:'"BookInputMapper.java"'},"@Mapper\npublic interface BookInputMapper {\n\n    @BeanMapping(unmappedTargetPolicy = ReportingPolicy.IGNORE)\n    Book toBook(BookInput input);\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookInputMapper.java"',title:'"BookInputMapper.java"'},"@Mapper\ninterface BookInputMapper {\n\n    @BeanMapping(unmappedTargetPolicy = ReportingPolicy.IGNORE)\n    fun toBook(input: BookInput): Book\n}\n")))),(0,o.kt)("p",null,"This Mapper provides a ",(0,o.kt)("inlineCode",{parentName:"p"},"toBook")," method to convert a ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput")," object to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Book")," object. "),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.name")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.price")," are all non-associated attributes that mapstruct can handle well."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The issue that ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.id")," can be null while ",(0,o.kt)("inlineCode",{parentName:"p"},"Book.id")," cannot be null has been discussed before, so it won't be repeated here.")),(0,o.kt)("p",null,"The key is how ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.storeId")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.authorIds")," should be mapped, which falls into two cases:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The entity defines @IdView properties  ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The entity does not define @IdView properties"))),(0,o.kt)("h3",{id:"if-the-entity-defines-idview-properties"},"If the entity defines @IdView properties"),(0,o.kt)("p",null,"If the entity type defines ",(0,o.kt)("inlineCode",{parentName:"p"},"@IdView")," properties, for example:"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'package com.example.model;\n\nimport org.babyfish.jimmer.sql.*;\nimport org.jetbrains.annotations.Nullable;\n\n@Entity\npublic interface Book {\n\n    ...omit other properties...\n\n    @ManyToOne\n    @Nullable\n    BookStore store();\n\n    @ManyToMany\n    @JoinTable(\n        name = "BOOK_AUTHOR_MAPPING",\n        joinColumnName = "BOOK_ID",\n        inverseJoinColumnName = "AUTHOR_id"\n    )\n    List<Author> authors();\n\n    // highlight-next-line\n    @IdView // id view of associated object store  \n    Long storeId();\n\n    // id view of all objects in associated collection authors\n    // highlight-next-line\n    @IdView("authors")    \n    List<Long> authorIds();\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'package com.example.model\n\nimport org.babyfish.jimmer.sql.*\n\n@Entity\ninterface Book {\n\n    ...omit other properties...\n\n    @ManyToOne\n    val store: BookStore?\n\n    @ManyToMany\n    @JoinTable(\n        name = "BOOK_AUTHOR_MAPPING",\n        joinColumnName = "BOOK_ID",\n        inverseJoinColumnName = "AUTHOR_id"\n    )\n    val authors: List<Auhtor>\n\n    // highlight-next-line\n    @IdView // id view of associated object store\n    val storeId: Long?\n\n    // id view of all objects in associated collection authors\n    // highlight-next-line\n    @IdView("authors") \n    val authorIds: List<Long>\n}\n')))),(0,o.kt)("p",null,"In this case, the entity object and POJO correspond completely, and the Mapper does not need any modification."),(0,o.kt)("h3",{id:"if-the-entity-does-not-define-idview-properties"},"If the entity does not define @IdView properties"),(0,o.kt)("p",null,"If the entity type does not define ",(0,o.kt)("inlineCode",{parentName:"p"},"@IdView")," properties, the Mapper needs to be modified:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Convert ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.storeId")," to a ",(0,o.kt)("inlineCode",{parentName:"p"},"BookStore")," object with only the id, then assign it to ",(0,o.kt)("inlineCode",{parentName:"p"},"Book.store"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Convert ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput.authorIds")," to a collection of ",(0,o.kt)("inlineCode",{parentName:"p"},"Author")," objects with only ids, then assign it to ",(0,o.kt)("inlineCode",{parentName:"p"},"Book.authors")))),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookInputMapper.java"',title:'"BookInputMapper.java"'},'@Mapper\npublic interface BookInputMapper {\n\n    @BeanMapping(unmappedTargetPolicy = ReportingPolicy.IGNORE)\n    // highlight-next-line\n    @Mapping(target = "store", source = "storeId") \n    // highlight-next-line\n    @Mapping(target = "authors", source = "authorIds")\n    Book toBook(BookInput input);\n\n    @BeanMapping(ignoreByDefault = true)\n    // highlight-next-line\n    @Mapping(target = "id", source = ".")\n    BookStore toBookStore(Long id);\n\n    @BeanMapping(ignoreByDefault = true)\n    // highlight-next-line\n    @Mapping(target = "id", source = ".")\n    Author toAuthor(Long id);\n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookInputMapper.java"',title:'"BookInputMapper.java"'},'@Mapper\ninterface BookInputMapper {\n\n    @BeanMapping(unmappedTargetPolicy = ReportingPolicy.IGNORE)\n    // highlight-next-line\n    @Mapping(target = "store", source = "storeId")\n    // highlight-next-line \n    @Mapping(target = "authors", source = "authorIds")\n    fun toBook(input: BookInput): Book\n\n    @BeanMapping(ignoreByDefault = true)\n    // highlight-next-line\n    @Mapping(target = "id", source = ".")\n    fun toBookStore(id: Long?): BookStore\n\n    @BeanMapping(ignoreByDefault = true)\n    // highlight-next-line\n    @Mapping(target = "id", source = ".")\n    fun toAuthor(id: Long?): Author\n}\n')))),(0,o.kt)("p",null,"Since mapstruct also supports ",(0,o.kt)("inlineCode",{parentName:"p"},'@Mapping(target = "store.id", source = "storeId")'),", the following syntax can also be used to simplify the code:"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookInputMapper.java"',title:'"BookInputMapper.java"'},'@Mapper\npublic interface BookInputMapper {\n\n    @BeanMapping(unmappedTargetPolicy = ReportingPolicy.IGNORE)\n    // highlight-next-line  \n    @Mapping(target = "store.id", source = "storeId")\n    @Mapping(target = "authors", source = "authorIds")\n    Book toBook(BookInput input);\n\n    @BeanMapping(ignoreByDefault = true)\n    @Mapping(target = "id", source = ".")\n    Author toAuthor(Long id); \n}\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookInputMapper.java"',title:'"BookInputMapper.java"'},'@Mapper\ninterface BookInputMapper {\n\n    @BeanMapping(unmappedTargetPolicy = ReportingPolicy.IGNORE)\n    // highlight-next-line\n    @Mapping(target = "store.id", source = "storeId") \n    @Mapping(target = "authors", source = "authorIds")\n    fun toBook(input: BookInput): Book\n\n    @BeanMapping(ignoreByDefault = true)\n    @Mapping(target = "id", source = ".")\n    fun toAuthor(id: Long?): Author\n}\n')))),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Now we can convert ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"Book"),":"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"BookInput input = ...omit...;\nBookInputMapper mapper = Mappers.getMapper(BookInputMapper.class);\nBook book = mapper.toBook(input);\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val input: BookInput = ...omit...\nval mapper = Mappers.getMapper(BookInputMapper::class.java)\nval book = mapper.toBook(input)\n")))),(0,o.kt)("h2",{id:"make-pojo-implement-input-interface"},"Make POJO implement Input interface"),(0,o.kt)("p",null,"Jimmer provides a simple interface, ",(0,o.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.Input<E>")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public interface Input<E> {\n\n    E toEntity(); \n}\n")),(0,o.kt)("p",null,"Dynamic objects will never implement this interface, this interface should be implemented by user-defined static POJO classes. Its function is very simple, just convert the current static POJO to a dynamic object."),(0,o.kt)("p",null,"This interface can provide convenience at the syntax level. Whether it is the underlying ",(0,o.kt)("a",{parentName:"p",href:"../../mutation/save-command"},"save command")," or the top-level spring-data base interface ",(0,o.kt)("inlineCode",{parentName:"p"},"JRepository/KRepository"),", its ",(0,o.kt)("inlineCode",{parentName:"p"},"sava")," method directly accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," parameters, without the user having to call the Mapper to complete the conversion."),(0,o.kt)("p",null,"If you want this convenience at the syntax level, you can choose to have the POJO implement this interface by modifying the ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput")," code as follows:"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookInput.java"',title:'"BookInput.java"'},"@Data\npublic class BookInput implements Input<Book> { \u2776\n\n    private static final Converter CONVERTER =  \n        Mappers.getMapper(Converter.class);\n\n    ...omit private fields...\n\n    @Override  \n    public Book toEntity() { \u2777\n        return CONVERTER.toBook(this);\n    }\n\n    @Mapper\n    interface Converter {\n\n        @BeanMapping(unmappedTargetPolicy = ReportingPolicy.IGNORE)\n        Book toBook(BookInput input);\n\n        ...omit other mapstruct configuration... \n    }\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookInput.kt"',title:'"BookInput.kt"'},"data class BookInput(\n    ...omit... \n): Input<Book> { \u2776\n\n    override fun toEntity(): Book = \u2777\n        CONVERTER.toBook(this)\n\n    @Mapper  \n    internal interface Converter {  \n\n        @BeanMapping(unmappedTargetPolicy = ReportingPolicy.IGNORE)\n        fun toBook(input: BookInput): Book\n\n        ...omit other mapstruct configuration...\n    }\n\n    companion object {\n\n        @JvmStatic  \n        private val CONVERTER =   \n            Mappers.getMapper(Converter::class.java)  \n    }\n}\n")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u2776 ",(0,o.kt)("inlineCode",{parentName:"p"},"BookInput")," class implements interface ",(0,o.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.Input"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u2777 Implement ",(0,o.kt)("inlineCode",{parentName:"p"},"Input.toEntity")," method, use MapStruct to convert the current static ",(0,o.kt)("inlineCode",{parentName:"p"},"Input DTO")," object to the dynamic ",(0,o.kt)("inlineCode",{parentName:"p"},"Book")," entity object. This is the only function of this class."))))}c.isMDXComponent=!0}}]);