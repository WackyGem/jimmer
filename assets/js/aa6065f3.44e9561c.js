"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[5066],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),i=n(34334);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(83117),i=n(67294),r=n(34334),l=n(72389),o=n(67392),p=n(7094),s=n(12466);const c="tabList__CuJ",d="tabItem_LNqP";function m(e){var t;const{lazy:n,block:l,defaultValue:m,values:u,groupId:h,className:k}=e,f=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=u??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,o.l)(g,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===m?m:m??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==v&&!g.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:N}=(0,p.U)(),[C,T]=(0,i.useState)(v),w=[],{blockElementScrollPositionUntilNextRender:S}=(0,s.o5)();if(null!=h){const e=y[h];null!=e&&e!==C&&g.some((t=>t.value===e))&&T(e)}const B=e=>{const t=e.currentTarget,n=w.indexOf(t),a=g[n].value;a!==C&&(S(t),T(a),null!=h&&N(h,String(a)))},P=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;n=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;n=w[t]??w[w.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",c)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},k)},g.map((e=>{let{value:t,label:n,attributes:l}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>w.push(e),onKeyDown:P,onFocus:B,onClick:B},l,{className:(0,r.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":C===t})}),n??t)}))),n?(0,i.cloneElement)(f.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function u(e){const t=(0,l.Z)();return i.createElement(m,(0,a.Z)({key:String(t)},e))}},38613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(83117),i=(n(67294),n(3905)),r=n(65488),l=n(85162);const o={sidebar_position:3,title:"Custom Filters"},p=void 0,s={unversionedId:"cache/multiview-cache/user-filter",id:"cache/multiview-cache/user-filter",title:"Custom Filters",description:"Cache-friendly Filters",source:"@site/docs/cache/multiview-cache/user-filter.mdx",sourceDirName:"cache/multiview-cache",slug:"/cache/multiview-cache/user-filter",permalink:"/jimmer/docs/cache/multiview-cache/user-filter",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/cache/multiview-cache/user-filter.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Custom Filters"},sidebar:"tutorialSidebar",previous:{title:"Built-in Filters",permalink:"/jimmer/docs/cache/multiview-cache/builtin-filter"},next:{title:"Cache Abandoned Reason",permalink:"/jimmer/docs/cache/multiview-cache/abandoned-callback"}},c={},d=[{value:"Cache-friendly Filters",id:"cache-friendly-filters",level:2},{value:"Basic Concepts",id:"basic-concepts",level:3},{value:"Logical Delete Revisited",id:"logical-delete-revisited",level:3},{value:"Define Cache-friendly Filters",id:"define-cache-friendly-filters",level:3},{value:"Enable Multi-view Cache",id:"enable-multi-view-cache",level:2},{value:"SubKey of Computed Properties",id:"subkey-of-computed-properties",level:2},{value:"Usage",id:"usage",level:2},{value:"Consistency",id:"consistency",level:2}],m={toc:d};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"cache-friendly-filters"},"Cache-friendly Filters"),(0,i.kt)("h3",{id:"basic-concepts"},"Basic Concepts"),(0,i.kt)("p",null,"In the ",(0,i.kt)("a",{parentName:"p",href:"../../query/global-filter/user-filter"},"User-defined Filters")," documentation, we introduced that custom global filters need to implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"Filter/KFilter")," interface."),(0,i.kt)("p",null,"However, ordinary filters defined using this interface are not cache-friendly. "),(0,i.kt)("p",null,"Taking the ",(0,i.kt)("inlineCode",{parentName:"p"},"Book")," entity as an example, if a cache-unfriendly global filter is set for it, it will cause all the following filter-sensitive properties"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Association properties targeting ",(0,i.kt)("inlineCode",{parentName:"p"},"Book"),", such as ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.books"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Author.books"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Computed properties relying on the above association properties, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.avgPrice"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.newestBooks")))),(0,i.kt)("p",null,"to become uncacheable."),(0,i.kt)("p",null,"Jimmer uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"CacheableFilter/KCacheableFilter")," interface to define cache-friendly filters:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="CacheableFilter.java"',title:'"CacheableFilter.java"'},"package org.babyfish.jimmer.sql.filter;\n\nimport org.babyfish.jimmer.sql.ast.table.Props;\nimport org.babyfish.jimmer.sql.event.EntityEvent;\n\nimport java.util.SortedMap;\n\npublic interface CacheableFilter<P extends Props> extends Filter<P> {\n\n    SortedMap<String, Object> getParameters();\n\n    boolean isAffectedBy(EntityEvent<?> e);\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="KCacheableFilter.kt"',title:'"KCacheableFilter.kt"'},"package org.babyfish.jimmer.sql.kt.filter\n\nimport org.babyfish.jimmer.sql.event.EntityEvent\nimport java.util.*\n\ninterface KCacheableFilter<E: Any> : KFilter<E> {\n\n    fun getParameters(): SortedMap<String, Any>?\n\n    fun isAffectedBy(e: EntityEvent<*>): Boolean\n}\n")))),(0,i.kt)("p",null,"This interface inherits from ",(0,i.kt)("inlineCode",{parentName:"p"},"Filter/KFilter")," and adds two new methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"getParameters"),": The SubKey fragment contributed by this filter for multi-view cache. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"isAffectedBy"),": Accepts an event that the filtered entity is modified, and judges whether the filtering fields depended on by the current filter are changed."))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"An entity type allows being processed by multiple global filters. If there are multiple global filters:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If any one of them is cache-unfriendly, it will cause other filter-sensitive properties to become uncacheable."),(0,i.kt)("p",{parentName:"li"},"Therefore, these global filters must either all be cache-unfriendly ",(0,i.kt)("inlineCode",{parentName:"p"},"Filter/KFilter"),", or all be cache-friendly ",(0,i.kt)("inlineCode",{parentName:"p"},"CacheableFilter/KCacheableFilter"),". Mixing them together makes no sense."),(0,i.kt)("p",{parentName:"li"},"If such meaningless mixing occurs accidentally, Jimmer will tell ",(0,i.kt)("a",{parentName:"p",href:"./abandoned-callback"},"why caching is disabled"),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When all global filters are cache-friendly, the data returned by the ",(0,i.kt)("inlineCode",{parentName:"p"},"getParameters()")," method of all ",(0,i.kt)("inlineCode",{parentName:"p"},"CacheableFilter/KCacheableFilter")," objects is merged together as the ",(0,i.kt)("inlineCode",{parentName:"p"},"SubKey")," of the multi-view cache."),(0,i.kt)("p",{parentName:"li"},"For example, if an entity is processed by two global filters at the same time. One is the filter implied by ",(0,i.kt)("a",{parentName:"p",href:"../../query/global-filter/logical-deleted"},"logical delete"),", denoted as ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),"; the other one is a user-defined filter, denoted as ",(0,i.kt)("inlineCode",{parentName:"p"},"b"),". "),(0,i.kt)("p",{parentName:"li"},"Assume "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"a"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"getParameters()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},'{"logicalDeleted":false}'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"b"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"getParameters()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},'{"tenant":"a"}')))),(0,i.kt)("p",{parentName:"li"},"Then the final ",(0,i.kt)("inlineCode",{parentName:"p"},"SubKey")," in multi-view cache will be "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},'{"logicalDeleted":false,"tenant":"a"}'))))),(0,i.kt)("h3",{id:"logical-delete-revisited"},"Logical Delete Revisited"),(0,i.kt)("p",null,"In the previous article ",(0,i.kt)("a",{parentName:"p",href:"./builtin-filter"},"Support Built-in Filters"),", we talked about the ",(0,i.kt)("inlineCode",{parentName:"p"},"useMultiViewCache")," parameter of ",(0,i.kt)("inlineCode",{parentName:"p"},"@LogicalDeleted")," annotation. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". To make all filter-sensitive properties cacheable, ",(0,i.kt)("inlineCode",{parentName:"p"},"useMultiViewCache")," must be configured as ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". This is very important."),(0,i.kt)("p",null,"Now we can explain this."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"useMultiViewCache")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"@LogicalDeleted")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", the corresponding built-in filter only implements the ",(0,i.kt)("inlineCode",{parentName:"p"},"Filter/KFilter")," interface and is cache-unfriendly.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"useMultiViewCache")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"@LogicalDeleted")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the corresponding built-in filter only implements the ",(0,i.kt)("inlineCode",{parentName:"p"},"CacheableFilter/KCacheableFilter")," interface and is cache-friendly."))),(0,i.kt)("h3",{id:"define-cache-friendly-filters"},"Define Cache-friendly Filters"),(0,i.kt)("p",null,"In the ",(0,i.kt)("a",{parentName:"p",href:"../../query/global-filter/user-filter"},"User-defined Filters")," documentation, we defined a super type ",(0,i.kt)("inlineCode",{parentName:"p"},"TenantAware")," for entities. Let's review its code again:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TenantAware.java"',title:'"TenantAware.java"'},"@MappedSuperclass\npublic interface TenantAware {\n\n    String tenant();\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TenantAware.kt"',title:'"TenantAware.kt"'},"@MappedSuperclass\ninterface TenantAware {\n\n    val tenant: String\n}\n")))),(0,i.kt)("p",null,"Any entity type that needs to support multiple tenants can inherit ",(0,i.kt)("inlineCode",{parentName:"p"},"TenantAware"),", such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Book"),":"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book extends TenantAware {\n\n    ...code omitted...\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book : TenantAware {\n    \n    ...code omitted...\n}\n")))),(0,i.kt)("p",null,"Assume there is an object of type ",(0,i.kt)("inlineCode",{parentName:"p"},"TenantProvider")," in the Spring context. Its Java method ",(0,i.kt)("inlineCode",{parentName:"p"},"get()")," and Kotlin property ",(0,i.kt)("inlineCode",{parentName:"p"},"tenant")," are used to extract the tenant from the identity information of the current operator. Define the following filter:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Component\npublic class TenantFilter implements CacheableFilter<TenantAwareProps> {\n\n    private final TenantProvider tenantProvider;\n\n    public TenantFilter(TenantProvider tenantProvider) {\n        this.tenantProvider = tenantProvider;\n    }\n\n    @Override\n    public void filter(FilterArgs<TenantAwareProps> args) {\n        String tenant = tenantProvider.get();\n        if (tenant != null) {\n            args.where(args.getTable().tenant().eq(tenant));\n        }\n    }\n\n    @Override\n    // highlight-next-line\n    public SortedMap<String, Object> getParameters() {\n        String tenant = tenantProvider.get();\n        if (tenant == null) {\n            return null;\n        }\n        SortedMap<String, Object> map = new TreeMap<>();\n        map.put("tenant", tenant);\n        return map;\n    }\n\n    @Override\n    // highlight-next-line  \n    public boolean isAffectedBy(EntityEvent<?> e) {\n        return e.isChanged(TenantAwareProps.TENANT)\n    }\n}\n'))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Component\nclass TenantFilter(\n    private val tenantProvider: TenantProvider  \n) : KCacheableFilter<TenantAware> {\n\n    override fun filter(args: KFilterArgs<TenantAware>) {\n        tenantProvider.tenant?.let {\n            args.apply {\n                where(table.tenant.eq(it))\n            }\n        }\n    }\n\n    // highlight-next-line\n    overide fun getParameters(): SortedMap<String, Any>? =\n        tenantProvider.tenant?.let {\n            sortedMapOf("tenant" to it)\n        }\n\n    // highlight-next-line\n    override fun isAffectedBy(e: EntityEvent<*>): Boolean =\n        e.isChanged(TenantAware::tenant)\n}\n')))),(0,i.kt)("h2",{id:"enable-multi-view-cache"},"Enable Multi-view Cache"),(0,i.kt)("p",null,"We need to enable multi-view cache for association cache and computed cache in ",(0,i.kt)("inlineCode",{parentName:"p"},"CacheFactory/KCacheFactory"),"."),(0,i.kt)("p",null,"This part of the content is exactly the same as discussed in the previous article ",(0,i.kt)("a",{parentName:"p",href:"./builtin-filter"},"Support Built-in Filters"),". It is unnecessary to repeat here."),(0,i.kt)("h2",{id:"subkey-of-computed-properties"},"SubKey of Computed Properties"),(0,i.kt)("p",null,"We have defined the ",(0,i.kt)("inlineCode",{parentName:"p"},"getParameters")," method in ",(0,i.kt)("inlineCode",{parentName:"p"},"TenantFilter"),". All affected association properties will automatically specify ",(0,i.kt)("inlineCode",{parentName:"p"},"SubKey")," for their association caches. "),(0,i.kt)("p",null,"However, unfortunately, due to the introduction of user-defined computation rules that the framework cannot understand, developers must manually specify ",(0,i.kt)("inlineCode",{parentName:"p"},"SubKey")," for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Resolver")," implementation of computed properties."),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookStoreAvgPriceResolver.java"',title:'"BookStoreAvgPriceResolver.java"'},"@Component\npublic class BookStoreAvgPriceResolver implements TransientResolver<Long, BigDecimal> {\n    \n    private final JSqlClient sqlClient;\n\n    @Override  \n    public Ref<SortedMap<String, Object>> getParameterMapRef() {\n        return sqlClient\n            .getFilters()\n            // highlight-next-line\n            .getTargetParameterMapRef(BookStoreProps.BOOKS);\n    }\n\n    ...code omitted...\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookStoreAvgPriceResolver.kt"',title:'"BookStoreAvgPriceResolver.kt"'},"@Compoent \nclass BookStoreAvgPriceResolver(\n    private val sqlClient: KSqlClient\n) : KTransientResolver<Long, BigDecimal> {\n\n    override fun getParameterMapRef(): Ref<SortedMap<String, Any>?>? {\n        return sqlClient\n            .filters\n            // highlight-next-line\n            .getTargetParameterMapRef(BookStore::books)\n    }\n\n    ...code omitted...\n}\n")))),(0,i.kt)("p",null,"Obviously, the computed property ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.avgPrice")," is actually determined by the association property ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.books")," and changes with it."),(0,i.kt)("p",null,"Therefore, whatever ",(0,i.kt)("inlineCode",{parentName:"p"},"SubKey")," the association property ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.books")," specifies for the multi-view cache system in the current invocation context, the computed property ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.avgPrice")," should specify the same one.  "),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.avgPrice")," is also affected by ",(0,i.kt)("inlineCode",{parentName:"p"},"Book.price"),". It changes when ",(0,i.kt)("inlineCode",{parentName:"p"},"Book.price")," changes."),(0,i.kt)("p",{parentName:"admonition"},"However, ",(0,i.kt)("inlineCode",{parentName:"p"},"Book.price")," is a non-association property of the object, so it must be irrelevant to the multi-view cache system. The ",(0,i.kt)("inlineCode",{parentName:"p"},"getParameterMapRef")," method does not need to consider it here. ")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Now that we have made the association property ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.books")," and the computed property ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.avgPrice")," support multi-view caching, let's use object fetchers to query them:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"BookStoreTable table = BookStoreTable.$;\nList<BookStore> stores = sqlClient\n    .createQuery(table)\n    .select(\n        table.fetch(\n            BookStoreFetcher.$\n                .allScalarFields()\n                .books( \u2776\n                    BookFetcher.$\n                        .allScalarFields()\n                )\n                .avgPrice() \u2777\n        )\n    )\n    .execute();\nSystem.out.println(stores);\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val stores = sqlClient\n    .createQuery(BookStore::class) {\n        select(\n            table.fetchBy {\n                allScalarFields()\n                books { \u2776\n                    allScalarFields()\n                }\n                avgPrice() \u2777\n            }\n        )\n    }\n    .execute()\nprintln(stores)\n")))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"With the large amount of basics in previous documents, this article intends to simplify the discussion by only showing the data in Redis and the final JSON returned to the user. The SQL generation process is no longer tracked step by step.")),(0,i.kt)("p",null,"The previous article assumed there is an object of type ",(0,i.kt)("inlineCode",{parentName:"p"},"TenantProvider")," in the Spring context. Its Java method ",(0,i.kt)("inlineCode",{parentName:"p"},"get()")," and Kotlin property ",(0,i.kt)("inlineCode",{parentName:"p"},"tenant")," are used to extract the tenant from the identity information of the current operator."),(0,i.kt)("p",null,"We can execute the above code 3 times, making ",(0,i.kt)("inlineCode",{parentName:"p"},"TenantProvider")," return different information each time to simulate 3 different user identities. "),(0,i.kt)("p",null,"In the 3 calls, make ",(0,i.kt)("inlineCode",{parentName:"p"},"TenantProvider"),' return null, "a" and "b" respectively.'),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"For the official sample, ",(0,i.kt)("inlineCode",{parentName:"p"},"TenantProvider")," is implemented based on HTTP headers with swagger UI support. It is easy to execute with 3 different user identities.")),(0,i.kt)("p",null,"Open redis-cli. We can verify the data in Redis:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'127.0.0.1:6379> keys BookStore.books-*\n1) "BookStore.books-2"  \n2) "BookStore.books-1"\n\n127.0.0.1:6379> hgetall BookStore.books-1\n1) "{\\"tenant\\":\\"b\\"}"\n2) "[6,4,2,8]"  \n3) "{\\"tenant\\":\\"a\\"}"\n4) "[5,3,1,9,7]"\n5) "{}"\n6) "[6,5,4,3,2,1,9,8,7]"\n\n127.0.0.1:6379> hgetall BookStore.books-2\n1) "{\\"tenant\\":\\"b\\"}"\n2) "[12,10]"\n3) "{\\"tenant\\":\\"a\\"}"  \n4) "[11]"\n5) "{}"\n6) "[12,11,10]"\n\n127.0.0.1:6379> keys BookStore.avgPrice-* \n1) "BookStore.avgPrice-2"\n2) "BookStore.avgPrice-1"\n\n127.0.0.1:6379> hgetall BookStore.avgPrice-1\n1) "{\\"tenant\\":\\"b\\"}"\n2) "65.25"\n3) "{\\"tenant\\":\\"a\\"}"\n4) "53.1" \n5) "{}"\n6) "58.500000"\n\n127.0.0.1:6379> hgetall BookStore.avgPrice-2\n1) "{\\"tenant\\":\\"b\\"}"  \n2) "80"\n3) "{\\"tenant\\":\\"a\\"}"\n4) "81"\n5) "{}"\n6) "80.333333" \n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Readers can take a close look at these ",(0,i.kt)("inlineCode",{parentName:"p"},"redis-cli")," commands and easily find that the data of SubKey ",(0,i.kt)("inlineCode",{parentName:"p"},'{"tenant":"a"}')," merged with the data of SubKey ",(0,i.kt)("inlineCode",{parentName:"p"},'{"tenant":"b"}')," is exactly the data of SubKey ",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),". ")),(0,i.kt)("p",null,"The data returned to the user in the 3 calls is: "),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"tenant_null",label:"filter.tenent=null",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id":2,\n        "name":"MANNING",  \n        "website":null,\n        // highlight-next-line\n        "books":[\n            {\n                "id":12,\n                "name":"GraphQL in Action",\n                "edition":3,\n                "price":80,\n            },\n            {\n                "id":11,\n                ...omitted...\n            },\n            {\n                "id":10,\n                ...omitted...\n            }\n        ],\n        // highlight-next-line \n        "avgPrice":80.333333\n    },\n    {\n        "id":1,\n        "name":"O\'REILLY",\n        "website":null,\n        // highlight-next-line\n        "books":[\n            {\n                "id":6,\n                "name":"Effective TypeScript",\n                "edition":3,\n                "price":88\n            },\n            {\n                "id":5,\n                ...omitted...\n            },\n            {\n                "id":4, \n                ...omitted...\n            },\n            {\n                "id":3,\n                "name":"Learning GraphQL",\n                "edition":3,\n                "price":51\n            },\n            {\n                "id":2,\n                ...omitted...\n            },\n            {\n                "id":1,\n                ...omitted...\n            },\n            {\n                "id":9,\n                "name":"Programming TypeScript",\n                "edition":3,\n                "price":48\n            },\n            {\n                "id":8,\n                ...omitted...\n            },\n            {\n                "id":7,\n                ...omitted...\n            } \n        ],\n        // highlight-next-line\n        "avgPrice":58.5\n    }\n]\n'))),(0,i.kt)(l.Z,{value:"tenant_a",label:"filter.tenent=a",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id":2,\n        "name":"MANNING",\n        "website":null,\n        // highlight-next-line\n        "books":[\n            {\n                "id":11,\n                "name":"GraphQL in Action",\n                "edition":2,\n                "price":81\n            }\n        ],\n        // highlight-next-line\n        "avgPrice":81\n    },\n    {\n        "id":1,\n        "name":"O\'REILLY",\n        "website":null,\n        // highlight-next-line\n        "books":[\n            {\n                "id":5,\n                "name":"Effective TypeScript",\n                "edition":2,\n                "price":69\n            },\n            {\n                "id":3,\n                ...omitted...\n            },\n            {\n                "id":1,\n                ...omitted...\n            },\n            {\n                "id":9,\n                ...omitted...\n            },\n            {\n                "id":7,\n                ...omitted...\n            }\n        ],\n        // highlight-next-line \n        "avgPrice":53.1\n    }\n]\n'))),(0,i.kt)(l.Z,{value:"tenant_b",label:"filter.tenent=b",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id":2,\n        "name":"MANNING",\n        "website":null,\n        // highlight-next-line\n        "books":[\n            {\n                "id":12,\n                "name":"GraphQL in Action",\n                "edition":3,\n                "price":80\n            },\n            {\n                "id":10,\n                ...omitted...\n            }\n        ],\n        // highlight-next-line\n        "avgPrice":80\n    },\n    {\n        "id":1,\n        "name":"O\'REILLY",\n        "website":null,\n        // highlight-next-line\n        "books":[\n            {\n                "id":6,\n                "name":"Effective TypeScript",\n                "edition":3,\n                "price":88\n            },\n            {\n                "id":4,\n                ...omitted...\n            },\n            {\n                "id":2,\n                ...omitted...\n            },\n            {\n                "id":8,\n                ...omitted...\n            }\n        ],\n        // highlight-next-line\n        "avgPrice":65.25\n    }\n]\n')))),(0,i.kt)("h2",{id:"consistency"},"Consistency"),(0,i.kt)("p",null,"Now let's modify the ",(0,i.kt)("inlineCode",{parentName:"p"},"tenant")," property of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Book"),' object with id 6 from "b" to "a".'),(0,i.kt)("p",null,"Since ",(0,i.kt)("inlineCode",{parentName:"p"},"Book-6")," belongs to ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore-1"),", it is foreseeable that the multi-view caches corresponding to the properties ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.books-1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.avgPrice-1")," will definitely be invalidated."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If BinLog trigger is enabled, modifying the database in any way can lead to Jimmer's cache consistency involvement. For example, directly executing the following SQL in SQL IDE:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"update BOOK\nset TENANT = 'a'\nwhere ID = 6; \n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If only Transaction trigger is enabled, the database must be modified using Jimmer's API:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'sqlClient.save(\n    BookDraft.$.produce(draft -> {\n        draft.setId(6L);\n        draft.setTenant("a");\n    })\n);\n'))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'sqlClient.save(\n    new(Book::class).by {\n        id = 6L\n        tenant = "a" \n    }\n)\n')))))),(0,i.kt)("p",null,"No matter which way above is used to modify the data, you will see the following log output:  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Delete data from redis: [Book-6] \u2776\nDelete data from redis: [Author.books-3] \u2777  \nDelete data from redis: [BookStore.books-1] \u2778\nDelete data from redis: [BookStore.avgPrice-1] \u2779\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u2776 Update object cache of modified entity")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u2777 Any association property targeting ",(0,i.kt)("inlineCode",{parentName:"p"},"Book")," must be affected, of course including ",(0,i.kt)("inlineCode",{parentName:"p"},"Author.books")),(0,i.kt)("p",{parentName:"li"},"According to existing database data, the affected ",(0,i.kt)("inlineCode",{parentName:"p"},"Author")," object id is 3")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u2778 Any association property targeting ",(0,i.kt)("inlineCode",{parentName:"p"},"Book")," must be affected, of course including ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.books")),(0,i.kt)("p",{parentName:"li"},"According to existing database data, the affected ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore")," object id is 1   ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u2779 The computed cache ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.avgPrice")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore")," object with id 1 is also affected. This is the most amazing characteristic."),(0,i.kt)("p",{parentName:"li"},"Although the framework is unaware of the computation rule used by users in computed properties, in the ",(0,i.kt)("a",{parentName:"p",href:"../cache-type/calculation"},"Computed Cache")," documentation, we discussed the following code in the ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStoreAvgPriceResolver")," class:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@EventListener\npublic void onAssociationChange(AssociationEvent e) {\n    if (sqlClient.getCaches().isAffectedBy(e) &&\n        // highlight-next-line\n        e.isChanged(BookStoreProps.BOOKS)\n    ) {\n        ...code omitted...\n    }\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@EventListener\nfun onAssociationChange(e: AssociationEvent) {\n    if (sqlClient.caches.isAffectedBy(e) &&\n        // highlight-next-line\n        e.isChanged(BookStore::books)\n    ) {\n        ...code omitted...\n    }\n}\n")))),(0,i.kt)("p",{parentName:"li"},"If you have forgotten the specific logic of this code, you can review the ",(0,i.kt)("a",{parentName:"p",href:"../cache-type/calculation"},"Computed Cache")," documentation. Just focus on the highlighted line. Here, this computed property cares about changes to the association property ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.books"),"."),(0,i.kt)("admonition",{parentName:"li",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Modifying the association field between tables is not the only way to trigger association change events. Modifying the filtered field in associated objects that affects global filters, ",(0,i.kt)("em",{parentName:"p"},"like ",(0,i.kt)("inlineCode",{parentName:"em"},"TENANT")," here"),", can also trigger association change events."),(0,i.kt)("p",{parentName:"admonition"},"This is a very important characteristic of Jimmer's trigger mechanism!")),(0,i.kt)("p",{parentName:"li"},"It is obvious that \u2778 has already sensed the change of association property ",(0,i.kt)("inlineCode",{parentName:"p"},"BookStore.books"),", so it will further lead to the invalidation of the computed cache here."))))}u.isMDXComponent=!0}}]);