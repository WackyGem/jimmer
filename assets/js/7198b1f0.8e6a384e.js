"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[8954],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),l=n(34334);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(83117),l=n(67294),r=n(34334),i=n(72389),o=n(67392),s=n(7094),c=n(12466);const p="tabList__CuJ",u="tabItem_LNqP";function d(e){var t;const{lazy:n,block:i,defaultValue:d,values:m,groupId:h,className:k}=e,b=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,o.l)(g,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===d?d:d??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==v&&!g.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:N}=(0,s.U)(),[T,x]=(0,l.useState)(v),j=[],{blockElementScrollPositionUntilNextRender:_}=(0,c.o5)();if(null!=h){const e=y[h];null!=e&&e!==T&&g.some((t=>t.value===e))&&x(e)}const O=e=>{const t=e.currentTarget,n=j.indexOf(t),a=g[n].value;a!==T&&(_(t),x(a),null!=h&&N(h,String(a)))},w=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=j.indexOf(e.currentTarget)+1;n=j[t]??j[0];break}case"ArrowLeft":{const t=j.indexOf(e.currentTarget)-1;n=j[t]??j[j.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",p)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},k)},g.map((e=>{let{value:t,label:n,attributes:i}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>j.push(e),onKeyDown:w,onFocus:O,onClick:O},i,{className:(0,r.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,l.cloneElement)(b.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function m(e){const t=(0,i.Z)();return l.createElement(d,(0,a.Z)({key:String(t)},e))}},38162:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=n(83117),l=(n(67294),n(3905)),r=n(65488),i=n(85162);const o={sidebar_position:2,title:"Regular Properties"},s=void 0,c={unversionedId:"query/object-fetcher/props",id:"query/object-fetcher/props",title:"Regular Properties",description:"Fetching Scalar Fields",source:"@site/docs/query/object-fetcher/props.mdx",sourceDirName:"query/object-fetcher",slug:"/query/object-fetcher/props",permalink:"/jimmer/docs/query/object-fetcher/props",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/query/object-fetcher/props.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Regular Properties"},sidebar:"tutorialSidebar",previous:{title:"Basic Usage",permalink:"/jimmer/docs/query/object-fetcher/usage"},next:{title:"Associations",permalink:"/jimmer/docs/query/object-fetcher/association"}},p={},u=[{value:"Fetching Scalar Fields",id:"fetching-scalar-fields",level:3},{value:"Fetching Multiple Fields",id:"fetching-multiple-fields",level:3},{value:"Fetching All Scalar Fields",id:"fetching-all-scalar-fields",level:3},{value:"Negative Properties (Exclude Unneeded Properties)",id:"negative-properties-exclude-unneeded-properties",level:3}],d={toc:u};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"fetching-scalar-fields"},"Fetching Scalar Fields"),(0,l.kt)("p",null,"Scalar fields refer to all non-associative fields in a database table. Taking fetching the book name as an example:"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"\nBookTable book = BookTable.$;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .select(\n        book.fetch(\n            // highlight-next-line\n            BookFetcher.$.name()\n        )\n    )\n    .execute();\n\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"\nval books = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        select(\n            table.fetchBy { \n                // highlight-next-line\n                name()\n            }\n        )\n    }\n    .execute()\n\n")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"For Java, the Annotation processor will automatically generate a Fetcher class for each entity interface, which is ",(0,l.kt)("inlineCode",{parentName:"p"},"BookFetcher")," in this example.")),(0,l.kt)("p",null,"The generated SQL is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_1_.ID, \n    /* highlight-next-line */\n    tb_1_.NAME  \nfrom BOOK as tb_1_\nwhere tb_1_.EDITION = ?\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The Java code does not call the ",(0,l.kt)("inlineCode",{parentName:"p"},"id()")," method of BookFetcher, but we can see the SQL statement still queries the id property of the object."),(0,l.kt)("p",{parentName:"admonition"},"The id property is treated specially and will always be queried, not controlled by object fetchers. "),(0,l.kt)("p",{parentName:"admonition"},"In fact, the auto-generated BookFetcher class does not even have an ",(0,l.kt)("inlineCode",{parentName:"p"},"id()")," method, because it is not needed.")),(0,l.kt)("p",null,"The printed result is (original output is compact, formatted here for readability):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id":3,\n        // highlight-next-line\n        "name":"Learning GraphQL"\n    },\n    ...Other objects omitted...  \n]\n')),(0,l.kt)("h3",{id:"fetching-multiple-fields"},"Fetching Multiple Fields"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"BookTable book = BookTable.$;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .select(\n        book.fetch(\n            BookFetcher.$\n                // highlight-next-line\n                .name()\n                // highlight-next-line\n                .edition()\n        )\n    )\n    .execute();\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        select(\n            table.fetchBy {\n                // highlight-next-line\n                name()\n                // highlight-next-line\n                edition()\n            }\n        )\n    }\n    .execute()\n")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Object fetchers are immutable objects, each method call returns a new object fetcher. "),(0,l.kt)("p",{parentName:"admonition"},"In the ",(0,l.kt)("strong",{parentName:"p"},"Java")," code above:"),(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BookFetcher.$")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BookFetcher.$.name()"),"  "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BookFetcher.$.name().edition()"))),(0,l.kt)("p",{parentName:"admonition"},"are three different object fetchers, each immutable."),(0,l.kt)("p",{parentName:"admonition"},"Object fetchers can be freely shared using static variables since they are immutable.")),(0,l.kt)("p",null,"The generated SQL is: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID,\n    /* highlight-next-line */  \n    tb_1_.NAME,\n    /* highlight-next-line */\n    tb_1_.EDITION   \nfrom BOOK as tb_1_\nwhere tb_1_.EDITION = ?\n")),(0,l.kt)("p",null,"The printed result is (original output is compact, formatted here for readability):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id":3,\n        // highlight-next-line\n        "name":"Learning GraphQL",\n        // highlight-next-line\n        "edition":1\n    },\n    ...Other objects omitted...\n]\n')),(0,l.kt)("h3",{id:"fetching-all-scalar-fields"},"Fetching All Scalar Fields"),(0,l.kt)("p",null,"In some scenarios, fetching all non-associative fields is a very common operation, so ",(0,l.kt)("inlineCode",{parentName:"p"},"allScalarFields()")," is provided to load all non-associative fields."),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"BookTable book = BookTable.$;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .select(\n        book.fetch(\n            // highlight-next-line\n            BookFetcher.$.allScalarFields()\n        )\n    )\n    .execute(); \n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        select(\n            table.fetchBy {\n                // highlight-next-line\n                allScalarFields()\n            }\n        )\n    }\n    .execute()\n")))),(0,l.kt)("p",null,"The generated SQL is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID,\n    // highlight-start \n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE \n    // highlight-end\nfrom BOOK as tb_1_\nwhere tb_1_.EDITION = ?\n")),(0,l.kt)("p",null,"The printed result is (original output is compact, formatted here for readability):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":3,\n    // highlight-start\n    "name":"Learning GraphQL", \n    "edition":3,\n    "price":51.00\n    // highlight-end\n}\n// Other objects omitted\n')),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"allScalarFields()")," only loads non-associative fields. In the example we can see it queries ",(0,l.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"edition"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"price"),", but does not query the associative properties ",(0,l.kt)("inlineCode",{parentName:"p"},"store")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"authors"),". "),(0,l.kt)("p",{parentName:"admonition"},"Fetching associative properties will be covered in ",(0,l.kt)("a",{parentName:"p",href:"./association"},"the next document"),".")),(0,l.kt)("h3",{id:"negative-properties-exclude-unneeded-properties"},"Negative Properties (Exclude Unneeded Properties)"),(0,l.kt)("p",null,"The previously discussed properties are positive properties that incrementally add fields to query. But in some cases, we only need to exclude some specific fields, while querying all other fields."),(0,l.kt)("p",null,"This is when negative properties can be used to exclude unneeded fields."),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"BookTable book = BookTable.$;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .select(\n        book.fetch(\n            BookFetcher.$\n            .allScalarFields()\n            // highlight-next-line\n            .edition(false)\n        )\n    )\n    .execute();\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        select(\n            table.fetchBy {\n                allScalarFields()\n                // highlight-next-line\n                edition(false)\n            }\n        )\n    }\n    .execute()\n")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"edition(false)")," uses false as a parameter, making it a negative property."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The properties of ",(0,l.kt)("inlineCode",{parentName:"p"},"allScalarFields()")," are ",(0,l.kt)("inlineCode",{parentName:"p"},"id + name + edition + price"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"edition(false)")," means ",(0,l.kt)("inlineCode",{parentName:"p"},"-edition")))),(0,l.kt)("p",null,"So in combination, the finally fetched properties are ",(0,l.kt)("inlineCode",{parentName:"p"},"id + name + price")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"For positive properties, ",(0,l.kt)("inlineCode",{parentName:"li"},"edition()")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"edition(true)")," are equivalent"),(0,l.kt)("li",{parentName:"ul"},"When most properties need to be fetched and only a few excluded, using ",(0,l.kt)("inlineCode",{parentName:"li"},"allScalarFields")," with negative properties can be very useful"))),(0,l.kt)("p",null,"The generated SQL is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID,\n    tb_1_.NAME, \n    tb_1_.PRICE    \nfrom BOOK as tb_1_\nwhere tb_1_.EDITION = ? \n")),(0,l.kt)("p",null,"The printed result is (original output is compact, formatted here for readability):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id":3,\n        "name":"Learning GraphQL",\n        "price":51.00\n        // `edition` is not here        \n    },\n    ...Other objects omitted...\n]\n')))}m.isMDXComponent=!0}}]);