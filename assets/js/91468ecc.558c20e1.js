"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[8441],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=l,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),l=n(34334);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(83117),l=n(67294),r=n(34334),i=n(72389),o=n(67392),s=n(7094),p=n(12466);const u="tabList__CuJ",d="tabItem_LNqP";function c(e){var t;const{lazy:n,block:i,defaultValue:c,values:m,groupId:g,className:b}=e,k=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,o.l)(h,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===c?c:c??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==v&&!h.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:T}=(0,s.U)(),[N,w]=(0,l.useState)(v),C=[],{blockElementScrollPositionUntilNextRender:_}=(0,p.o5)();if(null!=g){const e=y[g];null!=e&&e!==N&&h.some((t=>t.value===e))&&w(e)}const j=e=>{const t=e.currentTarget,n=C.indexOf(t),a=h[n].value;a!==N&&(_(t),w(a),null!=g&&T(g,String(a)))},x=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=C.indexOf(e.currentTarget)+1;n=C[t]??C[0];break}case"ArrowLeft":{const t=C.indexOf(e.currentTarget)-1;n=C[t]??C[C.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},b)},h.map((e=>{let{value:t,label:n,attributes:i}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>C.push(e),onKeyDown:x,onFocus:j,onClick:j},i,{className:(0,r.Z)("tabs__item",d,null==i?void 0:i.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,l.cloneElement)(k.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,i.Z)();return l.createElement(c,(0,a.Z)({key:String(t)},e))}},1246:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var a=n(83117),l=(n(67294),n(3905)),r=n(65488),i=n(85162);const o={sidebar_position:2,title:"Custom Filters"},s=void 0,p={unversionedId:"query/global-filter/user-filter",id:"query/global-filter/user-filter",title:"Custom Filters",description:"Provide Abstract Entity Superclass",source:"@site/docs/query/global-filter/user-filter.mdx",sourceDirName:"query/global-filter",slug:"/query/global-filter/user-filter",permalink:"/jimmer/docs/query/global-filter/user-filter",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/query/global-filter/user-filter.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Custom Filters"},sidebar:"tutorialSidebar",previous:{title:"Logical Deletion",permalink:"/jimmer/docs/query/global-filter/logical-deleted"},next:{title:"Multi-View Cache",permalink:"/jimmer/docs/query/global-filter/multiview-cache"}},u={},d=[{value:"Provide Abstract Entity Superclass",id:"provide-abstract-entity-superclass",level:2},{value:"Define Filter",id:"define-filter",level:2},{value:"Configure Filter in Spring",id:"configure-filter-in-spring",level:3},{value:"Configure Filter Without Spring",id:"configure-filter-without-spring",level:3},{value:"Filter Aggregate Root Objects",id:"filter-aggregate-root-objects",level:2},{value:"Filter Associated Objects",id:"filter-associated-objects",level:2},{value:"Disable Filters",id:"disable-filters",level:2},{value:"Sharding Filters",id:"sharding-filters",level:2}],c={toc:d};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"provide-abstract-entity-superclass"},"Provide Abstract Entity Superclass"),(0,l.kt)("p",null,"First, provide a ",(0,l.kt)("inlineCode",{parentName:"p"},"MappedSuperclass")," supertype for all entities that need multi-tenancy management to inherit:"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="TenantAware.java"',title:'"TenantAware.java"'},"@MappedSuperclass  \npublic interface TenantAware {\n\n    String tenant();\n}\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="TenantAware.kt"',title:'"TenantAware.kt"'},"@MappedSuperclass\ninterface TenantAware {\n\n    val tenant: String\n}\n")))),(0,l.kt)("p",null,"Any entity that needs multi-tenancy support can inherit ",(0,l.kt)("inlineCode",{parentName:"p"},"TenantAware"),", such as ",(0,l.kt)("inlineCode",{parentName:"p"},"Book"),":"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book extends TenantAware {\n\n    ...Other code omitted...\n} \n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book : TenantAware {\n    \n    ...Other code omitted...\n}\n")))),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Certainly, it's possible to apply filters directly to entity types without defining the abstract type. This works fine."),(0,l.kt)("p",{parentName:"admonition"},"However, it is better to extract the abstract type from entities, so one filter can apply to multiple entity types. "),(0,l.kt)("p",{parentName:"admonition"},"More importantly, ",(0,l.kt)("inlineCode",{parentName:"p"},"MappedSuperclass")," supports multiple inheritance, i.e. entities can inherit from multiple supertypes. Multi-inheritance combined with global filters brings amazing flexibility.")),(0,l.kt)("h2",{id:"define-filter"},"Define Filter"),(0,l.kt)("p",null,"Assume there is an object of type ",(0,l.kt)("inlineCode",{parentName:"p"},"TenantProvider")," in the Spring context. Its Java method ",(0,l.kt)("inlineCode",{parentName:"p"},"get()")," and Kotlin property ",(0,l.kt)("inlineCode",{parentName:"p"},"tenant")," are used to extract the tenant of the current operator from identity info. Define the filter as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In Java, interceptors need to implement ",(0,l.kt)("inlineCode",{parentName:"li"},"org.babyfish.jimmer.sql.filter.Filter"),"."),(0,l.kt)("li",{parentName:"ul"},"In Kotlin, interceptors need to implement ",(0,l.kt)("inlineCode",{parentName:"li"},"org.babyfish.jimmer.sql.kt.filter.KFilter"),".")),(0,l.kt)("p",null,"If using Spring management, the code is:"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Component \npublic class TenantFilter implements Filter<TenantAwareProps> {\n\n    private final TenantProvider tenantProvider;\n\n    public TenantFilter(TenantProvider tenantProvider) {\n        this.tenantProvider = tenantProvider;\n    }\n\n    @Override\n    public void filter(FilterArgs<TenantAwareProps> args) {\n        String tenant = tenantProvider.get();\n        if (tenant != null) {\n            args.where(args.getTable().tenant().eq(tenant));\n        }\n    }\n}\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Component\nclass TenantFilter(\n    private val tenantProvider: TenantProvider  \n) : KFilter<TenantAware> {\n\n    override fun filter(args: KFilterArgs<TenantAware>) {\n        tenantProvider.tenant?.let {\n            args.apply {\n                where(table.tenant.eq(it)) \n            }\n        }\n    }\n}\n")))),(0,l.kt)("p",null,"There are slight differences in filter definition between Java and Kotlin:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"In Java, the generic type of ",(0,l.kt)("inlineCode",{parentName:"p"},"Filter")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"TenantAwareProps"),", which is part of the code auto-generated by the compiler for the abstract type ",(0,l.kt)("inlineCode",{parentName:"p"},"TenantAware"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"In Kotlin, the generic type of ",(0,l.kt)("inlineCode",{parentName:"p"},"KFilter")," is the abstract type ",(0,l.kt)("inlineCode",{parentName:"p"},"TenantAware")," itself."))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TenantFilter")," filters the abstract type ",(0,l.kt)("inlineCode",{parentName:"p"},"TenantAware"),". For any entity that inherits the abstract interface ",(0,l.kt)("inlineCode",{parentName:"p"},"TenantAware")," directly or indirectly, its queries will be handled by this filter, automatically adding a where condition."),(0,l.kt)("p",null,"Inside ",(0,l.kt)("inlineCode",{parentName:"p"},"TenantFilter"),", it first extracts the tenant of the current operator from identity info. If the tenant is non-null, use it to filter data, querying only data that matches the specified tenant."),(0,l.kt)("h3",{id:"configure-filter-in-spring"},"Configure Filter in Spring"),(0,l.kt)("p",null,"In the above, the defined class ",(0,l.kt)("inlineCode",{parentName:"p"},"TenantFilter")," is decorated with ",(0,l.kt)("inlineCode",{parentName:"p"},"@Component"),", obviously a Spring-managed object. "),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"If using Jimmer's Spring Boot Starter and ensuring the filter is Spring-managed, Jimmer will auto-register it without extra configuration."),(0,l.kt)("p",{parentName:"admonition"},"Otherwise, must manually register.")),(0,l.kt)("h3",{id:"configure-filter-without-spring"},"Configure Filter Without Spring"),(0,l.kt)("p",null,"Attach the filter to the SqlClient object for it to take effect:"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"JSqlClient sqlClient = JSqlBuilder\n    .newBuilder()\n    // highlight-next-line\n    .addFilter(new CustmerFilter())\n    ...Other config omitted...\n    .build();\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val sqlClient =\n    newKSqlClient {\n        // highlight-next-line\n        addFilters(new CustmerFilter())\n        ...Other config omitted...\n    }\n")))),(0,l.kt)("h2",{id:"filter-aggregate-root-objects"},"Filter Aggregate Root Objects"),(0,l.kt)("p",null,"Filtering aggregate roots is the simplest use of global filters."),(0,l.kt)("p",null,"Since ",(0,l.kt)("inlineCode",{parentName:"p"},"Book")," entity inherits from ",(0,l.kt)("inlineCode",{parentName:"p"},"TenantAware"),", its queries will be affected by this filter."),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"List<Book> books = sqlClient.getEntities.findAll(Book.class);\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val books = sqlClient.entities.findAll(Book::class); \n")))),"or",(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"BookTable book = BookTable.$;\nList<Book> books = sqlClient\n    .createQuery(book) \n    .select(book)\n    .execute();\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val books = SqlClient\n    .createQuery(Book::class) {\n        select(table) \n    }\n    .execute()\n")))),(0,l.kt)("p",null,"The generated SQL:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID,\n    tb_1_.TENANT,\n    tb_1_.NAME,\n    tb_1_.EDITION, \n    tb_1_.PRICE,\n    tb_1_.STORE_ID\nfrom BOOK as tb_1_ \n/* highlight-next-line */\nwhere tb_1_.TENANT = ?\n")),(0,l.kt)("p",null,"Obviously, the query here is very simple without any query parameters. But the final SQL still filters on ",(0,l.kt)("inlineCode",{parentName:"p"},"tb_1_.TENANT"),"."),(0,l.kt)("h2",{id:"filter-associated-objects"},"Filter Associated Objects"),(0,l.kt)("p",null,"Not only aggregate roots can be filtered, associated objects can be filtered too:"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"List<Author> authors = sqlClient.getEntities.findAll(\n    AuthorFetcher.$\n        .allScalarFields()\n        // highlight-next-line\n        .books(\n            BookFetcher.$\n                .allScalarFields()\n        )\n);\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val books = sqlClient.entities.findAll(\n    newFetcher(Author::class).by {\n        allScalarFields()\n        // highlight-next-line\n        books {\n            allScalarFields()\n        }\n    }\n); \n")))),"or",(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"AuthorTable author = AuthorTable.$;\nList<Author> authors = sqlClient  \n    .createQuery(author)\n    .select(\n        author.fetch(\n            AuthorFetcher.$\n                .allScalarFields()\n                // highlight-next-line\n                .books(\n                    BookFetcher.$\n                        .allScalarFields()\n                )\n        )\n    )\n    .execute();\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val authors = SqlClient\n    .createQuery(Author::class) {\n        select(\n            table.fetchBy {\n                allScalarFields()\n                // highlight-next-line\n                books {\n                    allScalarFields()\n                }\n            }\n        )\n    }\n    .execute() \n")))),(0,l.kt)("p",null,"This generates two SQL statements:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Query aggregate roots:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID, tb_1_.FIRST_NAME, tb_1_.LAST_NAME, tb_1_.GENDER\nfrom AUTHOR as tb_1_\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Query associated objects:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_2_.AUTHOR_ID,\n    tb_1_.ID,\n    tb_1_.TENANT,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE\nfrom BOOK as tb_1_\ninner join BOOK_AUTHOR_MAPPING as tb_2_\n    on tb_1_.ID = tb_2_.BOOK_ID\nwhere\n    tb_2_.AUTHOR_ID in (?, ?, ?, ?, ?)\nand\n    /* highlight-next-line */  \n    tb_1_.TENANT = ? \n")))),(0,l.kt)("h2",{id:"disable-filters"},"Disable Filters"),(0,l.kt)("p",null,"Calling ",(0,l.kt)("inlineCode",{parentName:"p"},"sqlClient.filters")," creates a new temporary SqlClient without affecting the current ",(0,l.kt)("inlineCode",{parentName:"p"},"sqlClient"),", which can be used to disable filters:"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"JSqlClient tmpSqlClient = \n    sqlClient.filters(it -> {\n        it\n            // highlight-next-line\n            .disableByTypes(TenantFilter.class);\n    });\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val tmpSqlClient =\n    sqlClient.filters {\n        // highlight-next-line\n        disableByTypes(TenantFilter::class)\n    }\n")))),(0,l.kt)("p",null,"Here we get a temporary ",(0,l.kt)("inlineCode",{parentName:"p"},"tmpSqlClient"),". Queries created from it will ignore the filter we demonstrated above."),(0,l.kt)("h2",{id:"sharding-filters"},"Sharding Filters"),(0,l.kt)("p",null,"Jimmer provides simple APIs to query entity/entities by id/ids. "),(0,l.kt)("p",null,"By default, these APIs are special - they ignore global filters. Queries by id ignoring filters are correct since ids uniquely identify objects."),(0,l.kt)("p",null,"However, if ",(0,l.kt)("a",{parentName:"p",href:"https://shardingsphere.apache.org/document/4.1.1/en/manual/sharding-jdbc/"},"sharding-jdbc")," is used at the JDBC level, and the field used as filter condition is the sharding field in sharding-jdbc, querying by id alone would cause sharding-jdbc to query multiple shards, which is disastrous. "),(0,l.kt)("p",null,"To solve this, make the filter implement ",(0,l.kt)("inlineCode",{parentName:"p"},"ShardingFilter")," ",(0,l.kt)("em",{parentName:"p"},"(Java)")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"KShardingFilter")," ",(0,l.kt)("em",{parentName:"p"},"(Kotlin)"),". These interfaces have no behaviors, just for type marking."),(0,l.kt)("p",null,"Once a filter inherits ",(0,l.kt)("inlineCode",{parentName:"p"},"ShardingFilter")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"KShardingFilter"),", these simple APIs will no longer ignore the filter. This ensures the final SQL contains the sharding field required by sharding-jdbc, querying only one shard instead of all shards."))}m.isMDXComponent=!0}}]);