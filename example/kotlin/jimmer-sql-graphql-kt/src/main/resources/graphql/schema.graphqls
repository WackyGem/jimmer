scalar Long
scalar BigDecimal
scalar LocalDateTime

type Query {
    bookStores(name: String): [BookStore!]!
    books(name: String, storeName: String, authorName: String): [Book!]!
    authors(name: String): [Author!]!
}

type Mutation {
    saveBookStore(input: BookStoreInput!): BookStore!
    deleteBookStore(id: Long): Int!
    saveBook(input: BookInput!): Book!
    deleteBook(id: Long): Int!
    saveAuthor(input: AuthorInput!): Author!
    deleteAuthor(id: Long): Int!
}

interface CommonEntity {
    createdTime: LocalDateTime!
    modifiedTime: LocalDateTime!
}

type BookStore implements CommonEntity {
    id: Long!
    name: String!
    website: String
    avgPrice: BigDecimal!
    books(name: String): [Book!]!
    newestBooks: [Book!]!
    createdTime: LocalDateTime!
    modifiedTime: LocalDateTime!
}

type Book implements CommonEntity {
    id: Long!
    name: String!
    edition: Int!
    price: BigDecimal!
    store: BookStore
    authors: [Author!]!
    chapters: [Chapter!]!
    createdTime: LocalDateTime!
    modifiedTime: LocalDateTime!
}

type Author implements CommonEntity {
    id: Long!
    firstName: String!
    lastName: String!
    gender: Gender!
    fullName: String!
    books(name: String): [Book!]!
    createdTime: LocalDateTime!
    modifiedTime: LocalDateTime!
}

type Chapter implements CommonEntity {
    id: Long!
    index: Int!
    title: String!
    createdTime: LocalDateTime!
    modifiedTime: LocalDateTime!
}

input BookStoreInput {
    id: Long
    name: String!
    website: String
}

input BookInput {
    id: Long
    name: String!
    edition: Int
    price: BigDecimal!
    storeId: Long
    authorIds: [Long!]!
    chapters: [String!]!
}

input AuthorInput {
    id: Long
    firstName: String!
    lastName: String!
    gender: Gender!
}

enum Gender { MALE, FEMALE }
