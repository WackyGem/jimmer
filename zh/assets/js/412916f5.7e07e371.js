"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[396],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(n),c=i,v=p["".concat(s,".").concat(c)]||p[c]||m[c]||l;return n?a.createElement(v,r(r({ref:t},d),{},{components:n})):a.createElement(v,r({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),i=n(34334);const l="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(l,r),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(83117),i=n(67294),l=n(34334),r=n(72389),o=n(67392),s=n(7094),u=n(12466);const d="tabList__CuJ",m="tabItem_LNqP";function p(e){var t;const{lazy:n,block:r,defaultValue:p,values:c,groupId:v,className:k}=e,b=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=c??b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),h=(0,o.l)(f,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===p?p:p??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==N&&!f.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:j}=(0,s.U)(),[g,C]=(0,i.useState)(N),w=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=v){const e=y[v];null!=e&&e!==g&&f.some((t=>t.value===e))&&C(e)}const I=e=>{const t=e.currentTarget,n=w.indexOf(t),a=f[n].value;a!==g&&(O(t),C(a),null!=v&&j(v,String(a)))},x=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;n=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;n=w[t]??w[w.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,l.Z)("tabs-container",d)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},k)},f.map((e=>{let{value:t,label:n,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,key:t,ref:e=>w.push(e),onKeyDown:x,onFocus:I,onClick:I},r,{className:(0,l.Z)("tabs__item",m,null==r?void 0:r.className,{"tabs__item--active":g===t})}),n??t)}))),n?(0,i.cloneElement)(b.filter((e=>e.props.value===g))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==g})))))}function c(e){const t=(0,r.Z)();return i.createElement(p,(0,a.Z)({key:String(t)},e))}},94071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var a=n(83117),i=(n(67294),n(3905)),l=n(65488),r=n(85162);const o={sidebar_position:5,title:"Validation"},s=void 0,u={unversionedId:"old-en/jimmer-core/validation",id:"old-en/jimmer-core/validation",title:"Validation",description:"Validation is an incidental feature of jimmer objects that ensures that object data conforms to business rules.",source:"@site/docs/old-en/jimmer-core/validation.md",sourceDirName:"old-en/jimmer-core",slug:"/old-en/jimmer-core/validation",permalink:"/jimmer/zh/docs/old-en/jimmer-core/validation",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/old-en/jimmer-core/validation.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Validation"},sidebar:"tutorialSidebar",previous:{title:"Dynamic Object",permalink:"/jimmer/zh/docs/old-en/jimmer-core/dynamic"},next:{title:"jimmer-sql(Old)",permalink:"/jimmer/zh/docs/old-en/jimmer-sql/"}},d={},m=[{value:"Nullity",id:"nullity",level:2},{value:"Other validation",id:"other-validation",level:2}],p={toc:m};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Validation is an incidental feature of jimmer objects that ensures that object data conforms to business rules."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The validation of the jimmer object is directly hard-coded in the source code generated by the Annotation Processor. Once the Annotation Procssor is completed, it has a complete validation function without any framework-level interception and performance overhead.")),(0,i.kt)("h2",{id:"nullity"},"Nullity"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Kotlin support null safety, ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," means non-null, ",(0,i.kt)("inlineCode",{parentName:"p"},"T?")," means nullable, it's very precise, no problem."),(0,i.kt)("p",{parentName:"admonition"},"So this section is wrote for java, kotlin devloper can skip it.")),(0,i.kt)("p",null,"Java API uses the following means to determine whether a property is nullable."),(0,i.kt)("p",null,"For any property defined in the jimmer immutable data interface, the Annotation Processor will first make two sub-judgments"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Any one of these rules is satisfied, it is judged to be non-null"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Is it decorated with ",(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.NotNull"),"?"),(0,i.kt)("li",{parentName:"ul"},"Is it decorated with ",(0,i.kt)("inlineCode",{parentName:"li"},"@org.jetbrains.annotations.NotNull"),"?"),(0,i.kt)("li",{parentName:"ul"},"Is it decorated with ",(0,i.kt)("inlineCode",{parentName:"li"},"@org.springframework.lang.NonNull"),"?"),(0,i.kt)("li",{parentName:"ul"},"Is it decorated with ",(0,i.kt)("inlineCode",{parentName:"li"},"@org.babyfish.jimmer.sql.Id"),"(This is content of the jimmer-sql, will not discuss it here)?"),(0,i.kt)("li",{parentName:"ul"},"Is it a list property?"),(0,i.kt)("li",{parentName:"ul"},"Is its type one of the primitive types ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"char"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"byte"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"short"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"long"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"double"),"?"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Any one of these rules is satisfied, it is judged to be nullable"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Is it decorated with ",(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.Null"),"?"),(0,i.kt)("li",{parentName:"ul"},"Is it decorated with ",(0,i.kt)("inlineCode",{parentName:"li"},"@org.jetbrains.annotations.Nullable"),"?"),(0,i.kt)("li",{parentName:"ul"},"Is it decorated with ",(0,i.kt)("inlineCode",{parentName:"li"},"@org.springframework.lang.Nullable"),"?"),(0,i.kt)("li",{parentName:"ul"},"Is it a many-to-one association based on the middle table(This is content of the jimmer-sql, will not discuss it here)."),(0,i.kt)("li",{parentName:"ul"},"Is its type one of the boxed types ",(0,i.kt)("inlineCode",{parentName:"li"},"java.lang.Boolean"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"java.lang.Character"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"java.lang.Byte"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"java.lang.Short"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"java.lang.Integer"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"java One of .lang.Long"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"java.lang.Float")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"java.lang.Double"),"?")))),(0,i.kt)("p",null,"Finally, merge sub-judgments."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If it is judged to be both non-null and nullable, AnnotationProcessor will report an error, telling the user that the immutable interface declaration contains contradictory configuration."),(0,i.kt)("li",{parentName:"ul"},"If it is only judged to be non-null, but not nullable, the property is non-null."),(0,i.kt)("li",{parentName:"ul"},"If it is only judged to be nullable, but not non-null, the property is nullable."),(0,i.kt)("li",{parentName:"ul"},"If it is judged to be neither non-null nor nullable, refer to the value of the annotation ",(0,i.kt)("inlineCode",{parentName:"li"},"@org.babyfish.jimmer.Immutable")," of the interface.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If the interface is decorated with the annotation ",(0,i.kt)("inlineCode",{parentName:"li"},"@Immutable")," and its ",(0,i.kt)("inlineCode",{parentName:"li"},"value")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"NULLABLE"),", the property is nullable."),(0,i.kt)("li",{parentName:"ul"},"Otherwise, the property is non-null.")))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"For kotlin, the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"@Immutable")," is always ignored.")),(0,i.kt)("h2",{id:"other-validation"},"Other validation"),(0,i.kt)("p",null,"In addition to Nullity, jimmer implements partial JSR380 validation. As of now, the supported validation rules are"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Any custom validation annotation, the custom annotation itself needs to be decorated by ",(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.Constraint")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.NotEmpty")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.NotBlank")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.Size")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.Min")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.Max")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.Positive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.PositiveOrZero")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.Negative")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.NegativeOrZero")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.Email")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@javax.validation.constraints.Pattern"))),(0,i.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Immutable\npublic interface Car {\n\n    @Min(60)\n    @Max(2000)\n    int hp();\n}\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Immutable\npublic interface Car {\n\n    val hp: @Min(60) @Max(2000) Int\n}\n")))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Subsequent versions will continue to improve this function, and the supported rules will gradually increase.")))}c.isMDXComponent=!0}}]);